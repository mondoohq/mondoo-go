// Copyright (c) Mondoo, Inc.
// SPDX-License-Identifier: MPL-2.0
//
// Code generated by gen.go; DO NOT EDIT.

package mondoogql

// Input represents one of the Input structs:
//
// APITokenOrder, AWSConfigurationOptionsInput, AWSEventPatternInput, AWSRoleCredential, AWSSecretKeyCredential, AcceptLegalPolicy, ActivePoliciesInput, ActivePolicyOrder, AddSSHKeyRequest, AddTeamExternalGroupMappingInput, AdvisoryDocumentOptionsInput, AgentOrder, AgentVersionFilter, AggregateScoreCasesFilter, AggregateScoreFilter, AggregateScoreOrder, AnalyseAssetVulnerabilitiesInput, AnalyseIncognitoAssetInput, ApplyExceptionForScopesInput, AssetDocumentOptionsInput, AssetEolFilter, AssetExploitableFilter, AssetFieldFiltersMutation, AssetGroupOrder, AssetLastPackageUpdateTimeInput, AssetLinkInfoInput, AssetListPoliciesFilter, AssetOSRebootFilter, AssetOrder, AssetOverviewPageInfo, AssetPackagesStatsInput, AssetReportListPoliciesFilter, AssetReportPolicyOrder, AssetReportQueryOrder, AssetResourceInput, AssetSearchFilter, AssetSearchInput, AssetSearchSuggestionsInput, AssetSummaryOrder, AssetUpdateFilter, AssetUrlSegmentInput, AssetUrlStatsInput, AssetVulnerabilityReportInput, AuditLogOrder, AuditLogsFilter, AwsS3ConfigurationOptionsInput, AwsScanOptions, AzureBlobConfigurationOptionsInput, AzureConfigurationOptionsInput, AzureDevopsConfigurationOptionsInput, AzureDevopsTicketConfigInput, AzureDevopsTicketContextInput, AzureDevopsTicketContextProjectsInput, BigqueryConfigurationOptionsInput, BillingSessionInput, CaseContentInput, CaseRefInput, CaseTicketConfigInput, CasesConfigurationInput, CasesInput, CasesOrder, CategoriesListInput, ChangeSubscriptionPlanInput, CheckScoreFilter, CheckScoreOrder, ChecksOrder, ChecksSearchInput, CiCdJobPageInfo, CiCdProjectPageInfo, CicdProjectJobsInput, CicdProjectOrder, CicdProjectsInput, ClientIntegrationConfigurationInput, ClientIntegrationInput, CloseCaseInput, ComplianceAssetOrder, ComplianceAssetsSearchInput, ComplianceControlInput, ComplianceFrameworkInput, ComplianceFrameworkMutationInput, ComplianceFrameworksInput, ContentSearchInput, ContentSearchResultItemOrder, ControlDocumentOptionsInput, ControlScoreFilter, ControlScoreOrder, ControlsOrder, ControlsSearchInput, CreateCaseInput, CreateClientIntegrationInput, CreateInvitationInput, CreateOrganizationInput, CreateSecurityPipelinePullRequestInput, CreateServiceAccountInput, CreateSpaceInput, CreateTeamInput, CreateWIFAuthBindingInput, CreateWorkspaceInput, CrowdstrikeFalconConfigurationOptionsInput, DataQueryFilter, DataQueryOrder, DeleteAPITokenInput, DeleteAgentsInput, DeleteAssetsInput, DeleteCasesInput, DeleteClientIntegrationInput, DeleteCustomPolicyInput, DeleteCustomQueryPackInput, DeleteFrameworkInput, DeleteProjectsInput, DeleteSSHKeyRequest, DeleteSSOProviderInput, DeleteServiceAccountsInput, DeleteWorkspacesInput, DownloadBundleInput, DownloadFrameworkInput, EbsScanOptionsInput, Ec2ScanOptionsInput, EmailConfigurationOptionsInput, EmailPreferenceInput, EmailRecipientInput, EmailTicketConfigInput, EnableSSOProviderInput, EolAssetsConfigurationInput, ExceptionGroupsInput, ExceptionMutationInput, ExceptionReviewInput, ExceptionsConfigurationInput, ExceptionsDeleteInput, ExportReportFilterChecks, ExportReportFilterInventoryInput, ExportReportFilterPackages, ExportReportFilterVulnerabilitiesInput, ExportReportOptionsInput, ExtendExceptionInput, ExtendExceptionReviewInput, FindingCasesFilter, FindingDocumentOptionsInput, FindingsFilter, FindingsOrder, FindingsPackagesFilter, FindingsWebhookPostRequest, ForkFrameworkInput, FrameworkDocumentOptionsInput, GarbageCollectAssetsConfigurationInput, GcpConfigurationOptionsInput, GcsBucketConfigurationOptionsInput, GenerateAPITokenInput, GenerateDocumentInput, GeneratePolicyInput, GetClientIntegrationDeleteCommandInput, GetClientIntegrationTokenInput, GithubConfigurationOptionsInput, GithubTicketConfigInput, GithubTicketingConfigurationOptionsInput, GitlabConfigurationOptionsInput, GitlabTicketConfigInput, GitlabTicketingConfigurationOptionsInput, GoogleWorkspaceConfigurationOptionsInput, GroupFilter, HostConfigurationOptionsInput, HostedAwsConfigurationOptionsInput, IDSuggestionInput, IdentityFilter, IntegrationInput, IntegrationOptionsInput, IntegrationsSummaryInput, InvitationOrder, JiraConfigurationOptionsInput, JiraTicketConfigInput, JiraTicketContextInput, JiraTicketContextProjectsInput, JiraTicketContextUsersInput, K8sConfigurationOptionsInput, KeyValueInput, ListClientIntegrationsFilterInput, ListClientIntegrationsInput, ListDiscoveryResultsInput, ListExceptionGroupsFilter, ListExceptionGroupsInput, ListExceptionGroupsOrder, ListFrameworksInput, ManagedClientsFilters, MembershipOrder, MicrosoftDefenderConfigurationOptionsInput, ModifyRiskFactorInput, MqueryAssetDataInput, MqueryAssetScoresInput, MqueryInput, MqueryScoreInput, Ms365ConfigurationOptionsInput, MvdExperimentalSourcesConfigurationInput, MvdSourceInput, OciConfigurationOptionsInput, OktaConfigurationOptionsInput, OrgViewPageInfo, OrganizationOverviewInput, PackageFilter, PackageInput, PackageReferenceInput, PackageScoresFilter, PackageScoresInput, PackageScoresOrder, PackagesOrder, PerformDiscoveryInput, PingIntegrationInput, PlatformInput, PlatformMqlVexConfigurationInput, PlatformVulnerabilityConfigurationInput, PlatformsListInput, PolicyAddInput, PolicyAssignmentInput, PolicyDeleteInput, PolicyInput, PolicyReportMquerySummaryOrder, PolicyReportSummaryOrder, PostgresConfigurationOptionsInput, ProcessCaseEventsInput, PropertyQueryMutationInput, PropertyQueryMutationTarget, PropertyQueryOverride, QueryPackAddInput, RatedPoliciesInput, RegistrationTokenInput, RegistrationTokenOrder, RemediationFilter, RemediationInput, RemediationPackageFields, RemoveOrganizationMembershipInput, RemoveSpaceMembershipInput, RenderedAssetQueryDataInput, ReportViewedInfo, ReportViewedInput, RevokeRegistrationTokenInput, RiskFactorFilter, RiskFactorFilterQuery, RiskFactorMagnitudeModification, RoleInput, S3ConfigurationOptionsInput, SSOProviderInput, ScanConfigurationInput, ScimGroupMapping, ScopeDocumentOptionsInput, ScoreRange, SearchFilters, SecurityDashboardPageInfo, SecurityPipelineGithubConfigurationOptionsInput, SecurityPipelineGithubConfigurationOptionsRepoInput, SentinelOneConfigurationOptionsInput, ServiceAccountOrder, SetAssetAnnotationsInput, SetCustomPolicyInput, SetCustomQueryPackInput, SetOrganizationMembershipInput, SetRoleInput, SetRolesInput, SetSSOProviderInput, SetScimGroupMappingInput, SetSpaceMembershipInput, ShodanConfigurationOptionsInput, SlackConfigurationOptionsInput, SnowflakeConfigurationOptionsInput, SpacePolicySummaryInput, SpaceSettingsInput, SubscriptionItem, SuppressIntegrationMessageInput, TerminatedAssetsConfigurationInput, TicketContextInput, TicketingIntegrationsInput, TimeRange, TimestampFilter, TriggerActionInput, TriggerActionOptionsInput, UnusedServiceAccountsConfigurationInput, UpdateAPITokenInput, UpdateAgentInput, UpdateClientIntegrationConfigurationInput, UpdateClientIntegrationNameInput, UpdateFindingsSLAInput, UpdateOrganizationInput, UpdateSLAsInput, UpdateSecurityModelInput, UpdateServiceAccountInput, UpdateSpaceInput, UpdateTeamInput, UpdateUserInput, UpdateWorkspaceInput, UploadFrameworkInput, VPCConfigurationInput, VPCTagInput, VulnerabilityDashboardPageInfo, VulnerabilityDocumentOptionsInput, WIFAuthBindingOrder, WorkspaceConditionPossibleValuesInput, WorkspaceSelectionConditionInput, WorkspaceSelectionInput, WorkspaceSelectionIntConditionInput, WorkspaceSelectionKeyValueConditionInput, WorkspaceSelectionRatingConditionInput, WorkspaceSelectionStringConditionInput, WorkspaceSelectionsInput, WorkspacesInput, ZendeskConfigurationOptionsInput, ZendeskCustomFieldInput, ZendeskTicketConfigInput, ZendeskTicketContextInput.
type Input interface{}

// APITokenOrder represents input for ordering API tokens.
type APITokenOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field APITokenOrderField `json:"field" tfgen:"required=1"`
}

// AWSConfigurationOptionsInput represents aWS integration input.
type AWSConfigurationOptionsInput struct {
	// The AWS region. (Required.)
	Region String `json:"region" tfgen:"required=1"`
	// The scan configuration for the AWS integration. (Required.)
	ScanConfiguration ScanConfigurationInput `json:"scanConfiguration" tfgen:"required=1"`

	// A list of AWS account IDs (deprecated). (Optional.)
	AccountIDs *[]String `json:"accountIds,omitempty" tfgen:"required=0"`
	// Whether this is an AWS Organization integration. (Optional.)
	IsOrganization *Boolean `json:"isOrganization,omitempty" tfgen:"required=0"`
	// Whether to use v2 template. (Optional.)
	V2Template *Boolean `json:"v2Template,omitempty" tfgen:"required=0"`
}

// AWSEventPatternInput represents aWSEventPatternInput describes the options for event pattern based scan triggers.
type AWSEventPatternInput struct {
	// The scan type. (Required.)
	ScanType String `json:"scanType" tfgen:"required=1"`
	// The event source. (Required.)
	EventSource String `json:"eventSource" tfgen:"required=1"`
	// The event detail type. (Required.)
	EventDetailType String `json:"eventDetailType" tfgen:"required=1"`
}

// AWSRoleCredential represents aWS role credential input.
type AWSRoleCredential struct {
	// The role for the AWS role credential. (Required.)
	Role String `json:"role" tfgen:"required=1"`

	// The external ID for the AWS role credential. (Optional.)
	ExternalId *String `json:"externalId,omitempty" tfgen:"required=0"`
}

// AWSSecretKeyCredential represents aWS secret key credential input.
type AWSSecretKeyCredential struct {
	// The access key ID for the AWS secret key credential. (Required.)
	AccessKeyId String `json:"accessKeyId" tfgen:"required=1"`
	// The secret access key for the AWS secret key credential. (Required.)
	SecretAccessKey String `json:"secretAccessKey" tfgen:"required=1"`
}

// AcceptLegalPolicy represents accept legal policy input.
type AcceptLegalPolicy struct {

	// The resource MRN. (Optional.)
	ResourceMrn *String `json:"resourceMrn,omitempty" tfgen:"required=0"`
	// The policy ID. (Optional.)
	PolicyId *String `json:"policyId,omitempty" tfgen:"required=0"`
}

// ActivePoliciesInput represents active policies input.
type ActivePoliciesInput struct {
	// Scope MRN the scope for which to grab the active policies. Currently, only spaces are supported. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// Filters the policies with the given query. Partial matches by name are supported. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// The ordering of the returned policies. (Optional.)
	OrderBy *ActivePolicyOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// ActivePolicyOrder represents active policy order field.
type ActivePolicyOrder struct {
	// Field. (Required.)
	Field ActivePolicyOrderField `json:"field" tfgen:"required=1"`
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
}

// AddSSHKeyRequest represents input for adding an SSH key.
type AddSSHKeyRequest struct {
	// The MRN of the user. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The content of the SSH key. (Required.)
	Content String `json:"content" tfgen:"required=1"`
}

// AddTeamExternalGroupMappingInput represents input for adding external group mapping to a team.
type AddTeamExternalGroupMappingInput struct {
	// The MRN of the team. (Required.)
	TeamMrn String `json:"teamMrn" tfgen:"required=1"`
	// The external group ID from the identity provider. (Required.)
	ExternalId String `json:"externalId" tfgen:"required=1"`
}

// AdvisoryDocumentOptionsInput represents input options for the advisory of the document.
type AdvisoryDocumentOptionsInput struct {
	// The ID of the advisory to generate the report for. (Required.)
	AdvisoryId String `json:"advisoryId" tfgen:"required=1"`
	// The MRN of the scope to generate the report for. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// AgentOrder represents sorting for the agents.
type AgentOrder struct {
	// The direction of the agent. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field of the agent. (Required.)
	Field AgentOrderField `json:"field" tfgen:"required=1"`
}

// AgentVersionFilter represents input used to filter the agents by version.
type AgentVersionFilter struct {
	// The version of the agent. (Required.)
	Version String `json:"version" tfgen:"required=1"`
	// Whether to filter out the agent. (Required.)
	Not Boolean `json:"not" tfgen:"required=1"`
}

// AggregateScoreCasesFilter represents add this new input type somewhere in the file.
type AggregateScoreCasesFilter struct {

	// Filter cases by their status. (Optional.)
	Statuses *[]CaseStatus `json:"statuses,omitempty" tfgen:"required=0"`
}

// AggregateScoreFilter represents aggregate score filters.
type AggregateScoreFilter struct {

	// filter by textfield input. ex.: ["CHROME-2023"] elements will be ANDed. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// filter by aggregated score by finding. (Optional.)
	FindingMrn *String `json:"findingMrn,omitempty" tfgen:"required=0"`
	// filter by aggregated score type. (Optional.)
	ScoreType *AggregateScoreType `json:"scoreType,omitempty" tfgen:"required=0"`
	// filter by aggregated score types. (Optional.)
	ScoreTypes *[]AggregateScoreType `json:"scoreTypes,omitempty" tfgen:"required=0"`
	// filter by risk factor mrn. (Optional.)
	Risks *RiskFactorFilter `json:"risks,omitempty" tfgen:"required=0"`
	// filter to find all scores that are lower or equal than the provided score. (Optional.)
	MaxRiskScore *Int `json:"maxRiskScore,omitempty" tfgen:"required=0"`
	// filter to find all scores that are higher or equal than the provided risk value. Takes precedence over maxRiskScore. (Optional.)
	MinRiskValue *Int `json:"minRiskValue,omitempty" tfgen:"required=0"`
	// filter aggregated scores by findingMrn of an unversioned software package e.g., finding versions of bash by searching for //.../software/.../name/bash This filter should be used in conjunction with the scoreType filter: VERSIONED_SOFTWARE. (Optional.)
	SoftwareFindingMrn *String `json:"softwareFindingMrn,omitempty" tfgen:"required=0"`
	// filter by aggregate score state. If not provided, all states are returned. (Optional.)
	State *AggregateScoreState `json:"state,omitempty" tfgen:"required=0"`
	// Retrieve check scores by policy MRN. (Optional.)
	PolicyMrn *String `json:"policyMrn,omitempty" tfgen:"required=0"`
	// Retrieve aggregate scores that have remediation. (Optional.)
	HasRemediation *Boolean `json:"hasRemediation,omitempty" tfgen:"required=0"`
	// Filters the aggregate scores by a list of risk ratings. Accepts an array of `ScoreRating` enums (e.g., `CRITICAL`, `HIGH`). (Optional.)
	Rating *[]ScoreRating `json:"rating,omitempty" tfgen:"required=0"`
}

// AggregateScoreOrder represents aggregate score order object.
type AggregateScoreOrder struct {
	// Order direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// AggregateScore field. (Required.)
	Field AggregateScoreOrderField `json:"field" tfgen:"required=1"`
}

// AnalyseAssetVulnerabilitiesInput represents input data for analyzing an asset.
type AnalyseAssetVulnerabilitiesInput struct {
	// Asset MRN. (Required.)
	Mrn ID `json:"mrn" tfgen:"required=1"`
}

// AnalyseIncognitoAssetInput represents data needed for analyzing an asset without mrn.
type AnalyseIncognitoAssetInput struct {
	// Asset platform. (Required.)
	Platform PlatformInput `json:"platform" tfgen:"required=1"`
	// Asset packages. (Required.)
	Packages []PackageInput `json:"packages" tfgen:"required=1"`

	// optional kernel information for OS. (Optional.)
	KernelVersion *String `json:"kernelVersion,omitempty" tfgen:"required=0"`
}

// ApplyExceptionForScopesInput represents the input to apply an exception to multiple scopes.
type ApplyExceptionForScopesInput struct {
	// The scopes of the exceptions. Can be a space or an asset mrns. (Required.)
	ScopeMrns []String `json:"scopeMrns" tfgen:"required=1"`
	// How this exception should be handled Snooze the controls or disable them "enable" will delete the supplied control mrn from any exception. (Required.)
	Action ExceptionMutationAction `json:"action" tfgen:"required=1"`

	// RFC3339 timestamp The date, from which on the exception is no longer valid. Only applies to action IGNORE, empty is interpreted as forever. (Optional.)
	ValidUntil *String `json:"validUntil,omitempty" tfgen:"required=0"`
	// The justification for the exception. (Optional.)
	Justification *String `json:"justification,omitempty" tfgen:"required=0"`
	// List of control mrns that are expected. Applies only for compliance exceptions. (Optional.)
	ControlMrns *[]String `json:"controlMrns,omitempty" tfgen:"required=0"`
	// List of query mrns that are expected. Applies only for security exceptions. (Optional.)
	QueryMrns *[]String `json:"queryMrns,omitempty" tfgen:"required=0"`
	// List of cve mrns that are excepted. Applies only for cve exceptions. (Optional.)
	CveMrns *[]String `json:"cveMrns,omitempty" tfgen:"required=0"`
	// List of advisory mrns that are excepted. Applies only for advisory exceptions. (Optional.)
	AdvisoryMrns *[]String `json:"advisoryMrns,omitempty" tfgen:"required=0"`
	// Apply the exception to the CVEs that are part of the advisories. Applies only for advisory exceptions. (Optional.)
	ApplyToCves *Boolean `json:"applyToCves,omitempty" tfgen:"required=0"`
}

// AssetDocumentOptionsInput represents input options for the asset of the document.
type AssetDocumentOptionsInput struct {
	// The MRN of the asset to generate the report for. (Required.)
	AssetMrn String `json:"assetMrn" tfgen:"required=1"`
}

// AssetEolFilter represents asset end-of-life filter.
type AssetEolFilter struct {
	// Is end-of-life. (Required.)
	IsEol Boolean `json:"isEol" tfgen:"required=1"`
	// Is not end-of-life. (Required.)
	IsNotEol Boolean `json:"isNotEol" tfgen:"required=1"`
}

// AssetExploitableFilter represents asset exploitable filter.
type AssetExploitableFilter struct {
	// Is exploitable. (Required.)
	IsExploitable Boolean `json:"isExploitable" tfgen:"required=1"`
	// Is not exploitable. (Required.)
	IsNotExploitable Boolean `json:"isNotExploitable" tfgen:"required=1"`
}

// AssetFieldFiltersMutation represents asset field filters mutation.
type AssetFieldFiltersMutation struct {

	// labelBasedFilters is a list of key value pairs that is converted to a mql query. The provided filters will filter against `asset.labels`. All filters are ORed together. (Optional.)
	LabelBasedFilters *[]KeyValueInput `json:"labelBasedFilters,omitempty" tfgen:"required=0"`
	// annotationBasedFilters is a list of key value pairs that is converted to a mql query. The provided filters will filter against `asset.annotations`. All filters are ORed together. (Optional.)
	AnnotationBasedFilters *[]KeyValueInput `json:"annotationBasedFilters,omitempty" tfgen:"required=0"`
}

// AssetGroupOrder represents asset group order.
type AssetGroupOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field String `json:"field" tfgen:"required=1"`
}

// AssetLastPackageUpdateTimeInput represents query data for a single assets package update time.
type AssetLastPackageUpdateTimeInput struct {
	// Asset MRN. (Required.)
	Mrn ID `json:"mrn" tfgen:"required=1"`
}

// AssetLinkInfoInput represents asset link info input.
type AssetLinkInfoInput struct {
	// Asset ID. (Required.)
	AssetId String `json:"assetId" tfgen:"required=1"`
	// Space ID. (Required.)
	SpaceID String `json:"spaceID" tfgen:"required=1"`
}

// AssetListPoliciesFilter represents filter for the asset policies.
type AssetListPoliciesFilter struct {

	// Filters policies partially matching on policy name and MRN. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// Filters policies by their grade. (Optional.)
	Grades *[]String `json:"grades,omitempty" tfgen:"required=0"`
	// Filters policies by their rating. (Optional.)
	Ratings *[]String `json:"ratings,omitempty" tfgen:"required=0"`
	// Filters policies by their category. (Optional.)
	Categories *[]String `json:"categories,omitempty" tfgen:"required=0"`
}

// AssetOSRebootFilter represents asset OS reboot filter.
type AssetOSRebootFilter struct {
	// Pending reboot. (Required.)
	PendingReboot Boolean `json:"pendingReboot" tfgen:"required=1"`
	// No reboot. (Required.)
	NoReboot Boolean `json:"noReboot" tfgen:"required=1"`
}

// AssetOrder represents asset order.
type AssetOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field AssetOrderField `json:"field" tfgen:"required=1"`
}

// AssetOverviewPageInfo represents asset overview page info.
type AssetOverviewPageInfo struct {
	// Organization MRN. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// Space MRN. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// Asset MRN. (Required.)
	AssetMrn String `json:"assetMrn" tfgen:"required=1"`
	// Which tab is selected: Overview, Policies, Controls, Platform Vulnerabilities, Resources. (Required.)
	Tab String `json:"tab" tfgen:"required=1"`
}

// AssetPackagesStatsInput represents asset packages stats input.
type AssetPackagesStatsInput struct {
	// Asset MRN. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// Filter by state. (Optional.)
	State *ScoreStateFilter `json:"state,omitempty" tfgen:"required=0"`
}

// AssetReportListPoliciesFilter represents filter for the asset report's policies.
type AssetReportListPoliciesFilter struct {

	// Filters policies partially matching on policy name and MRN. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// Filters policies by their grade. (Optional.)
	Grades *[]String `json:"grades,omitempty" tfgen:"required=0"`
	// Filters policies by their category. (Optional.)
	Categories *[]String `json:"categories,omitempty" tfgen:"required=0"`
}

// AssetReportPolicyOrder represents asset report policy order.
type AssetReportPolicyOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field AssetReportQueryOrderField `json:"field" tfgen:"required=1"`
}

// AssetReportQueryOrder represents asset report query order.
type AssetReportQueryOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field AssetReportQueryOrderField `json:"field" tfgen:"required=1"`
}

// AssetResourceInput represents input for retrieving asset resources.
type AssetResourceInput struct {
	// The MRN of the asset. (Required.)
	AssetMrn String `json:"assetMrn" tfgen:"required=1"`

	// The selected paths to retrieve. (Optional.)
	SelectedPaths *[]String `json:"selectedPaths,omitempty" tfgen:"required=0"`
	// The selected names to retrieve. (Optional.)
	SelectedNames *[]String `json:"selectedNames,omitempty" tfgen:"required=0"`
}

// AssetSearchFilter represents structured filters for asset search operations.
type AssetSearchFilter struct {

	// Filters assets by one or more risk ratings. Uses OR logic. (Optional.)
	Rating *[]ScoreRating `json:"rating,omitempty" tfgen:"required=0"`
	// Filters assets by one or more platform names. Uses OR logic. (Optional.)
	Platform *[]String `json:"platform,omitempty" tfgen:"required=0"`
	// Filters assets by a partial name match. (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
}

// AssetSearchInput represents asset search input.
type AssetSearchInput struct {
	// Full text search query. Each term in the query will be ANDed together. The query language supports the following qualifiers: - `name`: Search for assets containing a specific name. This is the default qualifier if none is specified Example: `name:my-asset-name` - `asset`: Alias for `name` - `id`: Search for assets containing a specific asset ID. MRNs are also accepted Example: `id:my-asset-id` - `asset-id`: Alias for `id` - `label`: Search for assets containing a label a specific key and optional value. If no value is specified, the tag must exist with any value. If a value is specified, the tag must exist with that value. Example: `label:my-tag` or `label:my-tag=*` or `label:my-tag="my-value"` - `asset-label`: Alias for `label` - `annotation`: Search for assets containing a annotation a specific key and optional value. If no value is specified, the tag must exist with any value. If a value is specified, the tag must exist with that value. Example: `annotation:my-tag` or `annotation:my-tag=*` or `annotation:my-tag="my-value"` - `asset-annotation`: Alias for `annotation` - `platform`: Search for assets containing a specific platform Example: `platform:my-platform`. (Required.)
	Query String `json:"query" tfgen:"required=1"`

	// orgMrn is the mrn of the organization to search assets for. (Optional.)
	OrgMrn *String `json:"orgMrn,omitempty" tfgen:"required=0"`
	// spaceMrns is a list of space mrns to search assets for. If none are provided, all spaces in the organization will be searched. (Optional.)
	SpaceMrns *[]String `json:"spaceMrns,omitempty" tfgen:"required=0"`
	// Filter assets by their hierarchy. (Optional.)
	AssetUrlFilter *[]AssetUrlSegmentInput `json:"assetUrlFilter,omitempty" tfgen:"required=0"`
}

// AssetSearchSuggestionsInput represents input for asset search suggestions.
type AssetSearchSuggestionsInput struct {

	// The MRN of the space (deprecated, use scopeMrn instead). (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// The MRN of the scope to search within. (Optional.)
	ScopeMrn *String `json:"scopeMrn,omitempty" tfgen:"required=0"`
	// The search key for suggestions. (Optional.)
	SearchKey *String `json:"searchKey,omitempty" tfgen:"required=0"`
	// Filter suggestions by labels. (Optional.)
	LabelFilter *[]*KeyValueInput `json:"labelFilter,omitempty" tfgen:"required=0"`
	// The MRN of a related asset. (Optional.)
	RelatedAssetMrn *String `json:"relatedAssetMrn,omitempty" tfgen:"required=0"`
	// Whether to include CI/CD assets. (Optional.)
	IsCiCd *Boolean `json:"isCiCd,omitempty" tfgen:"required=0"`
}

// AssetSummaryOrder represents asset summary order.
type AssetSummaryOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field AssetSummaryOrderField `json:"field" tfgen:"required=1"`
}

// AssetUpdateFilter represents asset update filter.
type AssetUpdateFilter struct {

	// Before. (Optional.)
	Before *String `json:"before,omitempty" tfgen:"required=0"`
	// After. (Optional.)
	After *String `json:"after,omitempty" tfgen:"required=0"`
}

// AssetUrlSegmentInput represents asset url segment input.
type AssetUrlSegmentInput struct {
	// The key of the URL segment to filter by. (Required.)
	Key String `json:"key" tfgen:"required=1"`
	// The value of the URL segment to filter by. (Required.)
	Value String `json:"value" tfgen:"required=1"`
}

// AssetUrlStatsInput represents asset url stats input.
type AssetUrlStatsInput struct {

	// Space MRN. (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// Scope MRN. (Optional.)
	ScopeMrn *String `json:"scopeMrn,omitempty" tfgen:"required=0"`
	// Scope to score by. Default is ALL, which is a combination of the security and vulnerabilities scores. (Optional.)
	Scope *AssetUrlStatsScope `json:"scope,omitempty" tfgen:"required=0"`
	// Exclude stats in the listed categories. (Optional.)
	ExcludeCategories *[]AssetUrlStatsCategory `json:"excludeCategories,omitempty" tfgen:"required=0"`
}

// AssetVulnerabilityReportInput represents input data for an asset vulnerability report.
type AssetVulnerabilityReportInput struct {
	// The MRN of the asset. (Required.)
	AssetMrn ID `json:"assetMrn" tfgen:"required=1"`

	// The format type for the report. (Optional.)
	FormatType *FormatType `json:"formatType,omitempty" tfgen:"required=0"`
}

// AuditLogOrder represents input for ordering audit log entries.
type AuditLogOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field AuditLogOrderField `json:"field" tfgen:"required=1"`
}

// AuditLogsFilter represents audit log filters for multi-filter support.
type AuditLogsFilter struct {

	// Filter by timestamp. (Optional.)
	TimestampFilter *TimestampFilter `json:"timestampFilter,omitempty" tfgen:"required=0"`
	// Filter by identity. (Optional.)
	IdentityFilter *IdentityFilter `json:"identityFilter,omitempty" tfgen:"required=0"`
	// Filter by action (string match). (Optional.)
	ActionFilter *String `json:"actionFilter,omitempty" tfgen:"required=0"`
}

// AwsS3ConfigurationOptionsInput represents aWS S3 integration input.
type AwsS3ConfigurationOptionsInput struct {
	// The output format for the S3 bucket. (Required.)
	Output BucketOutputType `json:"output" tfgen:"required=1"`
	// The S3 bucket name. (Required.)
	Bucket String `json:"bucket" tfgen:"required=1"`
	// The AWS region for the S3 bucket. (Required.)
	Region String `json:"region" tfgen:"required=1"`
	// The access key for the S3 bucket. (Required.)
	AccessKey String `json:"accessKey" tfgen:"required=1"`
	// The secret access key for the S3 bucket. (Required.)
	SecretAccessKey String `json:"secretAccessKey" tfgen:"required=1"`
}

// AwsScanOptions represents scan type provided when triggering a scan on an AWS integration.
type AwsScanOptions struct {
	// (Required.)
	ScanType String `json:"scanType" tfgen:"required=1"`
}

// AzureBlobConfigurationOptionsInput represents azure Blob integration input.
type AzureBlobConfigurationOptionsInput struct {
	// The output format for the Azure blob. (Required.)
	Output BucketOutputType `json:"output" tfgen:"required=1"`
	// The Azure blob SAS URL. (Required.)
	BlobSasURL String `json:"blobSasURL" tfgen:"required=1"`
}

// AzureConfigurationOptionsInput represents azure integration input.
type AzureConfigurationOptionsInput struct {
	// The Azure tenant ID. (Required.)
	TenantId String `json:"tenantId" tfgen:"required=1"`
	// The Azure client ID. (Required.)
	ClientId String `json:"clientId" tfgen:"required=1"`

	// A list of whitelisted subscription IDs (deprecated). (Optional.)
	SubscriptionsWhitelist *[]String `json:"subscriptionsWhitelist,omitempty" tfgen:"required=0"`
	// A list of blacklisted subscription IDs (deprecated). (Optional.)
	SubscriptionsBlacklist *[]String `json:"subscriptionsBlacklist,omitempty" tfgen:"required=0"`
	// A list of allowed subscription IDs. (Optional.)
	SubscriptionsAllowlist *[]String `json:"subscriptionsAllowlist,omitempty" tfgen:"required=0"`
	// A list of denied subscription IDs. (Optional.)
	SubscriptionsDenylist *[]String `json:"subscriptionsDenylist,omitempty" tfgen:"required=0"`
	// TODO: temporary optional, fix by having separate update models. (Optional.)
	Certificate *String `json:"certificate,omitempty" tfgen:"required=0"`
	// Whether to scan VMs. (Optional.)
	ScanVms *Boolean `json:"scanVms,omitempty" tfgen:"required=0"`
	// The client secret for authentication (optional). (Optional.)
	ClientSecret *String `json:"clientSecret,omitempty" tfgen:"required=0"`
}

// AzureDevopsConfigurationOptionsInput represents azure Devops integration input.
type AzureDevopsConfigurationOptionsInput struct {
	// The Azure DevOps organization URL. (Required.)
	OrganizationUrl String `json:"organizationUrl" tfgen:"required=1"`
	// The Azure tenant ID. (Required.)
	TenantId String `json:"tenantId" tfgen:"required=1"`
	// The Azure service principal ID. (Required.)
	ServicePrincipalId String `json:"servicePrincipalId" tfgen:"required=1"`
	// The Azure client secret. (Required.)
	ClientSecret String `json:"clientSecret" tfgen:"required=1"`
	// Whether to auto-close tickets. (Required.)
	AutoCloseTickets Boolean `json:"autoCloseTickets" tfgen:"required=1"`
	// Whether to auto-create tickets. (Required.)
	AutoCreateTickets Boolean `json:"autoCreateTickets" tfgen:"required=1"`

	// The default Azure DevOps project name. (Optional.)
	DefaultProjectName *String `json:"defaultProjectName,omitempty" tfgen:"required=0"`
}

// AzureDevopsTicketConfigInput represents azure Devops ticket configuration input.
type AzureDevopsTicketConfigInput struct {
	// The Azure Devops project name. (Required.)
	ProjectName String `json:"projectName" tfgen:"required=1"`
}

// AzureDevopsTicketContextInput represents parameters for AzureDevopsTicketContext.
type AzureDevopsTicketContextInput struct {
	// The type of the ticket context. (Required.)
	Type AzureDevopsTicketContextType `json:"type" tfgen:"required=1"`

	// The parameters for the ticket context. (Optional.)
	Projects *AzureDevopsTicketContextProjectsInput `json:"projects,omitempty" tfgen:"required=0"`
}

// AzureDevopsTicketContextProjectsInput represents azure Devops projects filter parameters for AzureDevopsTicketContext.
type AzureDevopsTicketContextProjectsInput struct {

	// The Azure Devops query to filter the projects by. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
}

// BigqueryConfigurationOptionsInput represents bigQuery integration input.
type BigqueryConfigurationOptionsInput struct {
	// The BigQuery dataset ID. (Required.)
	DatasetId String `json:"datasetId" tfgen:"required=1"`
	// note: this is the content of the service account JSON file. (Required.)
	ServiceAccount String `json:"serviceAccount" tfgen:"required=1"`
}

// BillingSessionInput represents input for creating a billing session.
type BillingSessionInput struct {
	// The MRN of the organization. (Required.)
	OrgMrn ID `json:"orgMrn" tfgen:"required=1"`
	// The URL to return to after billing operations. (Required.)
	ReturnURL String `json:"returnURL" tfgen:"required=1"`
}

// CaseContentInput represents case content input.
type CaseContentInput struct {
	// References. (Required.)
	References []CaseRefInput `json:"references" tfgen:"required=1"`
	// Ticket type to generate content for. (Required.)
	Type TicketRefType `json:"type" tfgen:"required=1"`
}

// CaseRefInput represents case reference input.
type CaseRefInput struct {
	// MRN. Must be a query, control, CVE or advisory MRN. (Required.)
	FindingMrn String `json:"findingMrn" tfgen:"required=1"`
	// Scope MRN. Must be a space or an asset MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// CaseTicketConfigInput represents ticket configuration input.
type CaseTicketConfigInput struct {

	// Jira ticket configuration. (Optional.)
	Jira *JiraTicketConfigInput `json:"jira,omitempty" tfgen:"required=0"`
	// Email ticket configuration. (Optional.)
	Email *EmailTicketConfigInput `json:"email,omitempty" tfgen:"required=0"`
	// Github ticket configuration. (Optional.)
	Github *GithubTicketConfigInput `json:"github,omitempty" tfgen:"required=0"`
	// Gitlab ticket configuration. (Optional.)
	Gitlab *GitlabTicketConfigInput `json:"gitlab,omitempty" tfgen:"required=0"`
	// Azure Devops ticket configuration. (Optional.)
	AzureDevops *AzureDevopsTicketConfigInput `json:"azureDevops,omitempty" tfgen:"required=0"`
	// Zendesk ticket configuration. (Optional.)
	Zendesk *ZendeskTicketConfigInput `json:"zendesk,omitempty" tfgen:"required=0"`
}

// CasesConfigurationInput represents cases configuration input.
type CasesConfigurationInput struct {

	// Whether to enable auto-create cases on drift. (Optional.)
	AutoCreate *Boolean `json:"autoCreate,omitempty" tfgen:"required=0"`
	// Aggregate findings for the same asset within this window. The value is specified in hours. 0 means no aggregation. (Optional.)
	AggregationWindow *Int `json:"aggregationWindow,omitempty" tfgen:"required=0"`
}

// CasesInput represents cases input.
type CasesInput struct {
	// The scope of the cases to list. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// A context MRN to filter workspaces by. Can be used when the scope is an asset MRN. If specified, will show only cases for the given asset in the provided context. For example, if scope is asset MRN and context MRN is workspace MRN, will show only workspaces that have the asset in the given workspace. (Optional.)
	ContextMrn *String `json:"contextMrn,omitempty" tfgen:"required=0"`
	// Finding MRNs. If set, will only return cases with the specified finding MRNs. (Optional.)
	FindingMrns *[]String `json:"findingMrns,omitempty" tfgen:"required=0"`
	// Case statuses. If set, will only return cases with the specified statuses. (Optional.)
	Statuses *[]CaseStatus `json:"statuses,omitempty" tfgen:"required=0"`
	// Order by. If not provided the default ordering is by space risk delta desc. (Optional.)
	OrderBy *CasesOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// CasesOrder represents cases order.
type CasesOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field CasesOrderField `json:"field" tfgen:"required=1"`
}

// CategoriesListInput represents input for retrieving a list of categories for the scope.
type CategoriesListInput struct {
	// scopeMrn is the space mrn the user is requesting categories for. The returned response will contain all public categories unioned with categories appearing in content for this space. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// ChangeSubscriptionPlanInput represents input for changing subscription plan.
type ChangeSubscriptionPlanInput struct {
	// The MRN of the organization. (Required.)
	OrgMrn ID `json:"orgMrn" tfgen:"required=1"`
	// The URL to return to after the change. (Required.)
	ReturnURL String `json:"returnURL" tfgen:"required=1"`
	// Whether to confirm the subscription change. (Required.)
	Confirm Boolean `json:"confirm" tfgen:"required=1"`

	// The subscription items to change. (Optional.)
	Items *[]SubscriptionItem `json:"items,omitempty" tfgen:"required=0"`
	// The proration date for the change. (Optional.)
	ProrationDate *Int `json:"prorationDate,omitempty" tfgen:"required=0"`
}

// CheckScoreFilter represents check score filters.
type CheckScoreFilter struct {

	// Filter by state. (Optional.)
	State *ScoreStateFilter `json:"state,omitempty" tfgen:"required=0"`
	// Optional query terms. Will return only vulnerabilities containing the term in their MRN. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// Filter the result by a check mrn. (Optional.)
	CheckMrn *String `json:"checkMrn,omitempty" tfgen:"required=0"`
	// Filter the result by a policy mrn. (Optional.)
	PolicyMrn *String `json:"policyMrn,omitempty" tfgen:"required=0"`
	// Whether to include checks for CI/CD assets in the results. (Optional.)
	IncludeCicd *Boolean `json:"includeCicd,omitempty" tfgen:"required=0"`
	// Filter by impact. (Optional.)
	Impact *[]QueryImpact `json:"impact,omitempty" tfgen:"required=0"`
}

// CheckScoreOrder represents check score order.
type CheckScoreOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field CheckScoreOrderField `json:"field" tfgen:"required=1"`
}

// ChecksOrder represents checks order.
type ChecksOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field ChecksOrderField `json:"field" tfgen:"required=1"`
}

// ChecksSearchInput represents checks search input.
type ChecksSearchInput struct {
	// Scope MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// Framework MRN. (Required.)
	FrameworkMrn String `json:"frameworkMrn" tfgen:"required=1"`

	// Query to search checks by, currently searches by the check name only. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// Determines the ordering. (Optional.)
	OrderBy *ChecksOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// CiCdJobPageInfo represents page information for CI/CD jobs.
type CiCdJobPageInfo struct {
	// The MRN of the organization. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// The MRN of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The MRN of the asset. (Required.)
	AssetMrn String `json:"assetMrn" tfgen:"required=1"`
	// Which tab is selected: Overview, Policies, Controls, Platform Vulnerabilities, Resources. (Required.)
	Tab String `json:"tab" tfgen:"required=1"`
}

// CiCdProjectPageInfo represents page information for CI/CD projects.
type CiCdProjectPageInfo struct {
	// The MRN of the organization. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// The MRN of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The MRN of the project. (Required.)
	ProjectMrn String `json:"projectMrn" tfgen:"required=1"`
}

// CicdProjectJobsInput represents input for retrieving CI/CD project jobs.
type CicdProjectJobsInput struct {
	// (Required.)
	SpaceMrn ID `json:"spaceMrn" tfgen:"required=1"`
	// (Required.)
	ProjectId ID `json:"projectId" tfgen:"required=1"`
}

// CicdProjectOrder represents input for ordering CI/CD projects.
type CicdProjectOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field CicdProjectOrderField `json:"field" tfgen:"required=1"`
}

// CicdProjectsInput represents input for retrieving CI/CD projects.
type CicdProjectsInput struct {
	// The MRN of the space. (Required.)
	SpaceMrn ID `json:"spaceMrn" tfgen:"required=1"`

	// Filter by project type. (Optional.)
	TypeFilter *String `json:"typeFilter,omitempty" tfgen:"required=0"`
}

// ClientIntegrationConfigurationInput represents configuration options for client integrations.
type ClientIntegrationConfigurationInput struct {

	// (Optional.)
	K8sConfigurationOptions *K8sConfigurationOptionsInput `json:"k8sConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	AwsConfigurationOptions *AWSConfigurationOptionsInput `json:"awsConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	AzureConfigurationOptions *AzureConfigurationOptionsInput `json:"azureConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	AzureBlobConfigurationOptions *AzureBlobConfigurationOptionsInput `json:"azureBlobConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	Ms365ConfigurationOptions *Ms365ConfigurationOptionsInput `json:"ms365ConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GcpConfigurationOptions *GcpConfigurationOptionsInput `json:"gcpConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	HostConfigurationOptions *HostConfigurationOptionsInput `json:"hostConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GoogleWorkspaceConfigurationOptions *GoogleWorkspaceConfigurationOptionsInput `json:"googleWorkspaceConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	OktaConfigurationOptions *OktaConfigurationOptionsInput `json:"oktaConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	BigqueryConfigurationOptions *BigqueryConfigurationOptionsInput `json:"bigqueryConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	SnowflakeConfigurationOptions *SnowflakeConfigurationOptionsInput `json:"snowflakeConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	AwsS3ConfigurationOptions *AwsS3ConfigurationOptionsInput `json:"awsS3ConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	S3ConfigurationOptions *S3ConfigurationOptionsInput `json:"s3ConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	SlackConfigurationOptions *SlackConfigurationOptionsInput `json:"slackConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GithubConfigurationOptions *GithubConfigurationOptionsInput `json:"githubConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GitlabConfigurationOptions *GitlabConfigurationOptionsInput `json:"gitlabConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GcsBucketConfigurationOptions *GcsBucketConfigurationOptionsInput `json:"gcsBucketConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	PostgresConfigurationOptions *PostgresConfigurationOptionsInput `json:"postgresConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	OciConfigurationOptions *OciConfigurationOptionsInput `json:"ociConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	JiraConfigurationOptions *JiraConfigurationOptionsInput `json:"jiraConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	AwsHostedConfigurationOptions *HostedAwsConfigurationOptionsInput `json:"awsHostedConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	EmailConfigurationOptions *EmailConfigurationOptionsInput `json:"emailConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	ZendeskConfigurationOptions *ZendeskConfigurationOptionsInput `json:"zendeskConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	MicrosoftDefenderConfigurationOptions *MicrosoftDefenderConfigurationOptionsInput `json:"microsoftDefenderConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GithubTicketingConfigurationOptions *GithubTicketingConfigurationOptionsInput `json:"githubTicketingConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	GitlabTicketingConfigurationOptions *GitlabTicketingConfigurationOptionsInput `json:"gitlabTicketingConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	ShodanConfigurationOptions *ShodanConfigurationOptionsInput `json:"shodanConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	AzureDevopsConfigurationOptions *AzureDevopsConfigurationOptionsInput `json:"azureDevopsConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	SentinelOneConfigurationOptions *SentinelOneConfigurationOptionsInput `json:"sentinelOneConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	CrowdstrikeFalconConfigurationOptions *CrowdstrikeFalconConfigurationOptionsInput `json:"crowdstrikeFalconConfigurationOptions,omitempty" tfgen:"required=0"`
	// (Optional.)
	SecurityPipelineGithubConfigurationOptions *SecurityPipelineGithubConfigurationOptionsInput `json:"securityPipelineGithubConfigurationOptions,omitempty" tfgen:"required=0"`
}

// ClientIntegrationInput represents input for client integration.
type ClientIntegrationInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// (Optional.)
	WithToken *Boolean `json:"withToken,omitempty" tfgen:"required=0"`
}

// CloseCaseInput represents close case input.
type CloseCaseInput struct {
	// MRN of the case to close. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// ComplianceAssetOrder represents compliance asset order.
type ComplianceAssetOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field ComplianceAssetOrderField `json:"field" tfgen:"required=1"`
}

// ComplianceAssetsSearchInput represents compliance assets search input.
type ComplianceAssetsSearchInput struct {
	// Search query. (Required.)
	Query String `json:"query" tfgen:"required=1"`

	// after is the pagination cursor. To paginate to the end of the search results, keep calling search the the endCursor from the pageInfo response while the hasNextPage field is true. (Optional.)
	After *String `json:"after,omitempty" tfgen:"required=0"`
	// first is the number of items to return. Defaults to 100. (Optional.)
	First *Int `json:"first,omitempty" tfgen:"required=0"`
	// The asset group filters that match the assets. (Optional.)
	Groups *[]GroupFilter `json:"groups,omitempty" tfgen:"required=0"`
	// Order by. (Optional.)
	OrderBy *ComplianceAssetOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// ComplianceControlInput represents compliance control input.
type ComplianceControlInput struct {
	// Framework MRN. (Required.)
	FrameworkMrn String `json:"frameworkMrn" tfgen:"required=1"`
	// Control MRN. (Required.)
	ControlMrn String `json:"controlMrn" tfgen:"required=1"`
	// Scope MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// ComplianceFrameworkInput represents compliance framework input.
type ComplianceFrameworkInput struct {
	// The scope mrn for which to fetch the compliance framework. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// The compliance framework mrn. (Required.)
	FrameworkMrn String `json:"frameworkMrn" tfgen:"required=1"`
}

// ComplianceFrameworkMutationInput represents compliance framework mutation input.
type ComplianceFrameworkMutationInput struct {
	// Framework MRN. (Required.)
	FrameworkMrn String `json:"frameworkMrn" tfgen:"required=1"`
	// Scope MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// Action. (Required.)
	Action ComplianceFrameworkMutationAction `json:"action" tfgen:"required=1"`
}

// ComplianceFrameworksInput represents compliance frameworks input.
type ComplianceFrameworksInput struct {
	// The scope mrn for which to fetch compliance frameworks. Currently only supported is a space mrn. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// The framework state to filter by. (Optional.)
	State *ComplianceFrameworkState `json:"state,omitempty" tfgen:"required=0"`
	// The framework states to filter by. (Optional.)
	States *[]ComplianceFrameworkState `json:"states,omitempty" tfgen:"required=0"`
}

// ContentSearchInput represents input for searching for policies or registries.
type ContentSearchInput struct {
	// scopeMrn is the space mrn the user is requesting content for. Private content will only be searched from this space. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// catalogType is the type of content items to consider. (Required.)
	CatalogType CatalogType `json:"catalogType" tfgen:"required=1"`

	// A list of platforms that a content item must match. Only content matching all platforms will be considered. (Optional.)
	Platforms *[]String `json:"platforms,omitempty" tfgen:"required=0"`
	// A list of categories that a content item can match. Content matching at least one of the provided will be considered. (Optional.)
	Categories *[]String `json:"categories,omitempty" tfgen:"required=0"`
	// includePrivate indicates whether to include private content. Defaults to true. (Optional.)
	IncludePrivate *Boolean `json:"includePrivate,omitempty" tfgen:"required=0"`
	// includePublic indicates whether to include mondoo provided content. Defaults to true. (Optional.)
	IncludePublic *Boolean `json:"includePublic,omitempty" tfgen:"required=0"`
	// contentMrns is a list of mrns to consider. If none are provided, all will be considered Useful for text searching a specific set of content, like active policies. (Optional.)
	ContentMrns *[]String `json:"contentMrns,omitempty" tfgen:"required=0"`
	// If assignedOnly is set to true, only policies that are assigned will be considered. (Optional.)
	AssignedOnly *Boolean `json:"assignedOnly,omitempty" tfgen:"required=0"`
	// Full text search query. Each term in the query will be ANDed together. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// after is the pagination cursor. To paginate to the end of the search results, keep calling search the the endCursor from the pageInfo response while the hasNextPage field is true. (Optional.)
	After *String `json:"after,omitempty" tfgen:"required=0"`
	// limit is the number of items to return. Defaults to 100. (Optional.)
	Limit *Int `json:"limit,omitempty" tfgen:"required=0"`
	// (Optional.)
	OrderBy *ContentSearchResultItemOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// ContentSearchResultItemOrder represents user defined order direction and field.
type ContentSearchResultItemOrder struct {
	// The direction to order the results. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order the results. (Required.)
	Field ContentSearchResultItemOrderField `json:"field" tfgen:"required=1"`
}

// ControlDocumentOptionsInput represents input options for the controls of the document.
type ControlDocumentOptionsInput struct {
	// The MRN of the framework the control is for. (Required.)
	FrameworkMRN String `json:"frameworkMRN" tfgen:"required=1"`
	// The MRN of the control. (Required.)
	ControlMRN String `json:"controlMRN" tfgen:"required=1"`
}

// ControlScoreFilter represents control score filters.
type ControlScoreFilter struct {

	// Filter by state. (Optional.)
	State *ScoreStateFilter `json:"state,omitempty" tfgen:"required=0"`
	// Optional query terms. Will return only vulnerabilities containing the term in their MRN. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// Filter the result by a control mrn. (Optional.)
	ControlMrn *String `json:"controlMrn,omitempty" tfgen:"required=0"`
	// Whether to include controls for CI/CD assets in the results. (Optional.)
	IncludeCicd *Boolean `json:"includeCicd,omitempty" tfgen:"required=0"`
}

// ControlScoreOrder represents control score order.
type ControlScoreOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field ControlScoreOrderField `json:"field" tfgen:"required=1"`
}

// ControlsOrder represents controls order.
type ControlsOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field ControlsOrderField `json:"field" tfgen:"required=1"`
}

// ControlsSearchInput represents controls search input.
type ControlsSearchInput struct {

	// query, used to search on controls' or policies' description. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// after is the pagination cursor. To paginate to the end of the search results, keep calling search the the endCursor from the pageInfo response while the hasNextPage field is true. (Optional.)
	After *String `json:"after,omitempty" tfgen:"required=0"`
	// limit is the number of items to return. Defaults to 100. (Optional.)
	Limit *Int `json:"limit,omitempty" tfgen:"required=0"`
	// Order by. (Optional.)
	OrderBy *ControlsOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// CreateCaseInput represents the input to create a case.
type CreateCaseInput struct {
	// Title. (Required.)
	Title String `json:"title" tfgen:"required=1"`
	// Notes. (Required.)
	Notes String `json:"notes" tfgen:"required=1"`
	// References. (Required.)
	References []CaseRefInput `json:"references" tfgen:"required=1"`
	// Ticket configuration. (Required.)
	TicketConfig CaseTicketConfigInput `json:"ticketConfig" tfgen:"required=1"`

	// Ticketing integration MRN. (Optional.)
	IntegrationMrn *String `json:"integrationMrn,omitempty" tfgen:"required=0"`
	// Optional workspace MRN. If specified, the case will be created in the workspace. It is required that the case references are contained in the space that owns the provided workspace. (Optional.)
	WorkspaceMrn *String `json:"workspaceMrn,omitempty" tfgen:"required=0"`
}

// CreateClientIntegrationInput represents input provided when creating a client integration.
type CreateClientIntegrationInput struct {
	// (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// (Required.)
	Type ClientIntegrationType `json:"type" tfgen:"required=1"`
	// (Required.)
	LongLivedToken Boolean `json:"longLivedToken" tfgen:"required=1"`
	// (Required.)
	ConfigurationOptions ClientIntegrationConfigurationInput `json:"configurationOptions" tfgen:"required=1"`
}

// CreateInvitationInput represents input for creating an invitation.
type CreateInvitationInput struct {
	// The MRN of the resource (space or organization). (Required.)
	ResourceMrn String `json:"resourceMrn" tfgen:"required=1"`

	// Either inviteeMrn or inviteeEmail need to be set. (Optional.)
	InviteeMrn *String `json:"inviteeMrn,omitempty" tfgen:"required=0"`
	// Either inviteeMrn or inviteeEmail need to be set. (Optional.)
	InviteeEmail *String `json:"inviteeEmail,omitempty" tfgen:"required=0"`
	// Deprecated: Use roleMrns instead. Provide either roleMrn or roleMrns, not both. (Optional.)
	RoleMrn *String `json:"roleMrn,omitempty" tfgen:"required=0"`
	// List of role MRNs for the invitation. Provide either roleMrn or roleMrns, not both. (Optional.)
	RoleMrns *[]String `json:"roleMrns,omitempty" tfgen:"required=0"`
	// The expiration time of the invitation. (Optional.)
	ExpiresAt *String `json:"expiresAt,omitempty" tfgen:"required=0"`
	// The message for the invitation. (Optional.)
	Message *String `json:"message,omitempty" tfgen:"required=0"`
}

// CreateOrganizationInput represents create organization input.
type CreateOrganizationInput struct {
	// Name. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// ID. (Optional.)
	Id *String `json:"id,omitempty" tfgen:"required=0"`
	// Description. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
}

// CreateSecurityPipelinePullRequestInput represents create a new security pipeline pull request input.
type CreateSecurityPipelinePullRequestInput struct {
	// The MRN of the security pipeline integration to use. (Required.)
	IntegrationMrn String `json:"integrationMrn" tfgen:"required=1"`

	// An optional list of finding MRNs. If provided, we create a patch only for the specified findings. (Optional.)
	FindingMrns *[]String `json:"findingMrns,omitempty" tfgen:"required=0"`
	// An optional list of asset MRNs. If provided, we create a patch only for the specified assets. (Optional.)
	AssetMrns *[]String `json:"assetMrns,omitempty" tfgen:"required=0"`
}

// CreateServiceAccountInput represents input for creating a service account.
type CreateServiceAccountInput struct {
	// The scope for which the service account will be created (currently the only supported scopes are space and an organization). (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// Optional description for the service account. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// Optional labels for the service account. (Optional.)
	Labels *[]KeyValueInput `json:"labels,omitempty" tfgen:"required=0"`
	// The roles to assign to the service account. (Optional.)
	Roles *[]RoleInput `json:"roles,omitempty" tfgen:"required=0"`
	// Optional name for the service account. (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
	// Optional RFC 3339 timestamp until which the service account will be valid. (Optional.)
	ValidUntil *String `json:"validUntil,omitempty" tfgen:"required=0"`
}

// CreateSpaceInput represents create space input.
type CreateSpaceInput struct {
	// Name. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// Organization MRN. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`

	// ID. (Optional.)
	Id *String `json:"id,omitempty" tfgen:"required=0"`
	// Description. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// Settings. (Optional.)
	Settings *SpaceSettingsInput `json:"settings,omitempty" tfgen:"required=0"`
}

// CreateTeamInput represents input for creating a team.
type CreateTeamInput struct {
	// The name of the team. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// The scope MRN (organization or space) that will own this team. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// ID. (Optional.)
	Id *String `json:"id,omitempty" tfgen:"required=0"`
	// Optional description of the team. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
}

// CreateWIFAuthBindingInput represents input for creating a Workload Identity Federation (WIF) auth binding.
type CreateWIFAuthBindingInput struct {
	// Space mrn associated with the binding. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// User selected name. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// URI for the token issuer, e.g. https://accounts.google.com. (Required.)
	IssuerUri String `json:"issuerUri" tfgen:"required=1"`
	// Unique identifier to confirm. (Required.)
	Subject String `json:"subject" tfgen:"required=1"`

	// Optional description. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// List of roles associated with the binding (e.g. agent mrn). (Optional.)
	Roles *[]String `json:"roles,omitempty" tfgen:"required=0"`
	// Expiration in seconds associated with the binding. (Optional.)
	Expiration *Int `json:"expiration,omitempty" tfgen:"required=0"`
	// List of additional configurations to confirm. (Optional.)
	Mappings *[]KeyValueInput `json:"mappings,omitempty" tfgen:"required=0"`
	// List of allowed audiences. (Optional.)
	AllowedAudiences *[]String `json:"allowedAudiences,omitempty" tfgen:"required=0"`
}

// CreateWorkspaceInput represents create workspace input.
type CreateWorkspaceInput struct {
	// The MRN of the owner of the workspace. (Required.)
	OwnerMrn String `json:"ownerMrn" tfgen:"required=1"`
	// The name of the workspace. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// Workspace selections. (Required.)
	Selections WorkspaceSelectionsInput `json:"selections" tfgen:"required=1"`

	// Description of the workspace. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
}

// CrowdstrikeFalconConfigurationOptionsInput represents crowdstrikeFalcon integration input.
type CrowdstrikeFalconConfigurationOptionsInput struct {
	// Client ID used for authentication with CrowdStrike Falcon platform. (Required.)
	ClientId String `json:"clientId" tfgen:"required=1"`
	// Client Secret used for authentication with CrowdStrike Falcon platform. (Required.)
	ClientSecret String `json:"clientSecret" tfgen:"required=1"`

	// The CrowdStrike Falcon cloud region. (Optional.)
	Cloud *String `json:"cloud,omitempty" tfgen:"required=0"`
	// CID selector for cases when the client id/secret has access to multiple CIDs. (Optional.)
	MemberCID *String `json:"memberCID,omitempty" tfgen:"required=0"`
	// createAssets is a flag to create assets in the backend when they are not found. (Optional.)
	CreateAssets *Boolean `json:"createAssets,omitempty" tfgen:"required=0"`
}

// DataQueryFilter represents data query filters.
type DataQueryFilter struct {

	// Optional query terms. Will return only vulnerabilities containing the term in their MRN. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// Filter the result by a query mrn. (Optional.)
	QueryMrn *String `json:"queryMrn,omitempty" tfgen:"required=0"`
	// Filter the result by a policy mrn. (Optional.)
	PolicyMrn *String `json:"policyMrn,omitempty" tfgen:"required=0"`
	// Whether to include checks for CI/CD assets in the results. (Optional.)
	IncludeCicd *Boolean `json:"includeCicd,omitempty" tfgen:"required=0"`
}

// DataQueryOrder represents data query order.
type DataQueryOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field DataQueryOrderField `json:"field" tfgen:"required=1"`
}

// DeleteAPITokenInput represents input for deleting an API token.
type DeleteAPITokenInput struct {
	// The MRN of the API token to delete. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// DeleteAgentsInput represents input used when deleting an agent.
type DeleteAgentsInput struct {
	// The MRN of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The MRNs of the agents to delete. (Required.)
	AgentMrns []String `json:"agentMrns" tfgen:"required=1"`
}

// DeleteAssetsInput represents delete assets input.
type DeleteAssetsInput struct {
	// Space MRN. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`

	// Asset MRNs. (Optional.)
	AssetMrns *[]ID `json:"assetMrns,omitempty" tfgen:"required=0"`
}

// DeleteCasesInput represents delete cases input.
type DeleteCasesInput struct {
	// MRNs of cases to delete. (Required.)
	Mrns []String `json:"mrns" tfgen:"required=1"`
}

// DeleteClientIntegrationInput represents input for deleting a client integration.
type DeleteClientIntegrationInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// DeleteCustomPolicyInput represents input for deleting a policy.
type DeleteCustomPolicyInput struct {
	// The mrn of the policy. (Required.)
	PolicyMrn String `json:"policyMrn" tfgen:"required=1"`
}

// DeleteCustomQueryPackInput represents input for deleting a query pack.
type DeleteCustomQueryPackInput struct {
	// The mrn of the query pack. (Required.)
	QueryPackMrn String `json:"queryPackMrn" tfgen:"required=1"`
}

// DeleteFrameworkInput represents delete framework input.
type DeleteFrameworkInput struct {
	// Framework MRN. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// DeleteProjectsInput represents input for deleting projects.
type DeleteProjectsInput struct {
	// The MRNs of the projects to delete. (Required.)
	Mrns []String `json:"mrns" tfgen:"required=1"`
}

// DeleteSSHKeyRequest represents input for deleting an SSH key.
type DeleteSSHKeyRequest struct {
	// The MRN of the user. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The fingerprint of the SSH key to delete. (Required.)
	Fingerprint String `json:"fingerprint" tfgen:"required=1"`
}

// DeleteSSOProviderInput represents input for deleting SSO provider.
type DeleteSSOProviderInput struct {
	// The MRN of the organization. (Required.)
	OrganizationMrn String `json:"organizationMrn" tfgen:"required=1"`
}

// DeleteServiceAccountsInput represents input for deleting service accounts.
type DeleteServiceAccountsInput struct {
	// The MRN of the scope containing the service accounts. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// The MRNs of the service accounts to delete. (Required.)
	Mrns []String `json:"mrns" tfgen:"required=1"`
}

// DeleteWorkspacesInput represents delete workspaces input.
type DeleteWorkspacesInput struct {
	// MRNs of workspaces to delete. (Required.)
	Mrns []String `json:"mrns" tfgen:"required=1"`
}

// DownloadBundleInput represents download bundle input.
type DownloadBundleInput struct {
	// The mrn is a unique identifier. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// DownloadFrameworkInput represents download framework input.
type DownloadFrameworkInput struct {
	// Framework MRN. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// Scope MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// Whether to include all evidence in the bundle. By default, only evidence for activated policies is returned. (Optional.)
	AllEvidence *Boolean `json:"allEvidence,omitempty" tfgen:"required=0"`
}

// EbsScanOptionsInput represents options for EBS scanning with the AWS integration.
type EbsScanOptionsInput struct {

	// The target instances per scanner. (Optional.)
	TargetInstancesPerScanner *Int `json:"targetInstancesPerScanner,omitempty" tfgen:"required=0"`
	// The maximum number of instances per ASG. (Optional.)
	MaxAsgInstances *Int `json:"maxAsgInstances,omitempty" tfgen:"required=0"`
}

// Ec2ScanOptionsInput represents options for EC2 scans with the AWS integration.
type Ec2ScanOptionsInput struct {

	// Whether to use SSM. (Optional.)
	Ssm *Boolean `json:"ssm,omitempty" tfgen:"required=0"`
	// The instance IDs to filter. (Optional.)
	InstanceIDsFilter *[]String `json:"instanceIdsFilter,omitempty" tfgen:"required=0"`
	// The regions to filter. (Optional.)
	RegionsFilter *[]String `json:"regionsFilter,omitempty" tfgen:"required=0"`
	// The tags to filter. (Optional.)
	TagsFilter *Map `json:"tagsFilter,omitempty" tfgen:"required=0"`
	// Whether to scan EBS volumes. (Optional.)
	EbsVolumeScan *Boolean `json:"ebsVolumeScan,omitempty" tfgen:"required=0"`
	// EBS scan options. (Optional.)
	EbsScanOptions *EbsScanOptionsInput `json:"ebsScanOptions,omitempty" tfgen:"required=0"`
	// Whether to use instance connect. (Optional.)
	InstanceConnect *Boolean `json:"instanceConnect,omitempty" tfgen:"required=0"`
	// The instance IDs to exclude. (Optional.)
	ExcludedInstanceIDsFilter *[]String `json:"excludedInstanceIdsFilter,omitempty" tfgen:"required=0"`
	// The regions to exclude. (Optional.)
	ExcludedRegionsFilter *[]String `json:"excludedRegionsFilter,omitempty" tfgen:"required=0"`
	// The tags to exclude. (Optional.)
	ExcludedTagsFilter *Map `json:"excludedTagsFilter,omitempty" tfgen:"required=0"`
}

// EmailConfigurationOptionsInput represents email integration input.
type EmailConfigurationOptionsInput struct {
	// A list of potential email recipients. (Required.)
	Recipients []EmailRecipientInput `json:"recipients" tfgen:"required=1"`

	// Whether to auto-create tickets for new cases. (Optional.)
	AutoCreateTickets *Boolean `json:"autoCreateTickets,omitempty" tfgen:"required=0"`
	// Whether to auto-close tickets for closed cases. (Optional.)
	AutoCloseTickets *Boolean `json:"autoCloseTickets,omitempty" tfgen:"required=0"`
}

// EmailPreferenceInput represents email preference input.
type EmailPreferenceInput struct {
	// The list ID. (Required.)
	ListID EmailPreferenceList `json:"listID" tfgen:"required=1"`
	// Whether to subscribe to the list. (Required.)
	Subscribe Boolean `json:"subscribe" tfgen:"required=1"`
}

// EmailRecipientInput represents email recipient input.
type EmailRecipientInput struct {
	// Name of the recipient. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// Email of the recipient. (Required.)
	Email String `json:"email" tfgen:"required=1"`
	// Whether this recipient is the default recipient. (Required.)
	IsDefault Boolean `json:"isDefault" tfgen:"required=1"`

	// An optional reference URL that will get attached to the ticket reference created by this integration. (Optional.)
	ReferenceUrl *String `json:"referenceUrl,omitempty" tfgen:"required=0"`
}

// EmailTicketConfigInput represents email ticket configuration input.
type EmailTicketConfigInput struct {
	// Email address to send the ticket to. (Required.)
	EmailAddress String `json:"emailAddress" tfgen:"required=1"`
}

// EnableSSOProviderInput represents input for enabling SSO provider.
type EnableSSOProviderInput struct {
	// The MRN of the organization. (Required.)
	OrganizationMrn String `json:"organizationMrn" tfgen:"required=1"`
	// Whether to enable the SSO provider. (Required.)
	Enabled Boolean `json:"enabled" tfgen:"required=1"`
}

// EolAssetsConfigurationInput represents eol assets configuration input.
type EolAssetsConfigurationInput struct {

	// Whether to enable EOL assets analysis. (Optional.)
	Enable *Boolean `json:"enable,omitempty" tfgen:"required=0"`
	// How many months in advance should EOL be applied as risk factor. (Optional.)
	MonthsInAdvance *Int `json:"monthsInAdvance,omitempty" tfgen:"required=0"`
}

// ExceptionGroupsInput represents the input to get a list of exception groups.
type ExceptionGroupsInput struct {
	// The mrn of the space/asset. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// The mrn to filter on. It can be a query, control, policy or a framework. (Optional.)
	Mrn *String `json:"mrn,omitempty" tfgen:"required=0"`
	// Deprecated. Use the types field. (Optional.)
	Type *ExceptionType `json:"type,omitempty" tfgen:"required=0"`
	// The types of the exceptions. (Optional.)
	Types *[]ExceptionType `json:"types,omitempty" tfgen:"required=0"`
	// The action of the exception groups. Empty list means all. (Optional.)
	Actions *[]ExceptionMutationAction `json:"actions,omitempty" tfgen:"required=0"`
}

// ExceptionMutationInput represents the input to apply an exception.
type ExceptionMutationInput struct {
	// The scope of the exception. Can be a space or an asset mrn. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// How this exception should be handled Snooze the controls or disable them "enable" will delete the supplied control mrn from any exception. (Required.)
	Action ExceptionMutationAction `json:"action" tfgen:"required=1"`

	// DEPRECATED. WILL BE REMOVED ONCE THE UI IS OUT the resource to apply the exception to, e.g. a framework. (Optional.)
	ResourceMrn *String `json:"resourceMrn,omitempty" tfgen:"required=0"`
	// DEPRECATED. WILL BE REMOVED ONCE THE UI IS OUT List of mrns that are excepted. (Optional.)
	ExceptionMrns *[]String `json:"exceptionMrns,omitempty" tfgen:"required=0"`
	// RFC3339 timestamp The date, from which on the exception is no longer valid. Only applies to action IGNORE, empty is interpreted as forever. (Optional.)
	ValidUntil *String `json:"validUntil,omitempty" tfgen:"required=0"`
	// The justification for the exception. (Optional.)
	Justification *String `json:"justification,omitempty" tfgen:"required=0"`
	// List of control mrns that are excepted. Applies only for compliance exceptions. (Optional.)
	ControlMrns *[]String `json:"controlMrns,omitempty" tfgen:"required=0"`
	// List of query mrns that are excepted. Applies only for security exceptions. (Optional.)
	QueryMrns *[]String `json:"queryMrns,omitempty" tfgen:"required=0"`
	// List of cve mrns that are excepted. Applies only for cve exceptions. (Optional.)
	CveMrns *[]String `json:"cveMrns,omitempty" tfgen:"required=0"`
	// List of advisory mrns that are excepted. Applies only for advisory exceptions. (Optional.)
	AdvisoryMrns *[]String `json:"advisoryMrns,omitempty" tfgen:"required=0"`
	// Apply the exception to the CVEs that are part of the advisories. Applies only for advisory exceptions. (Optional.)
	ApplyToCves *Boolean `json:"applyToCves,omitempty" tfgen:"required=0"`
}

// ExceptionReviewInput represents the input to apply a review to an exception.
type ExceptionReviewInput struct {
	// The scope of the exception. Can be a space or an asset mrn. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// The id of the exception to review. (Required.)
	ExceptionId String `json:"exceptionId" tfgen:"required=1"`
	// The review action to be applied. (Required.)
	Action ExceptionReviewAction `json:"action" tfgen:"required=1"`
}

// ExceptionsConfigurationInput represents exceptions configuration configuration input.
type ExceptionsConfigurationInput struct {

	// Whether to enable require approval for exceptions. (Optional.)
	RequireApproval *Boolean `json:"requireApproval,omitempty" tfgen:"required=0"`
	// Whether to allow creation of exception groups with indefinite valid until. (Optional.)
	AllowIndefiniteValidUntil *Boolean `json:"allowIndefiniteValidUntil,omitempty" tfgen:"required=0"`
	// Whether a user can approve their own exception requests. (Optional.)
	AllowSelfApproval *Boolean `json:"allowSelfApproval,omitempty" tfgen:"required=0"`
}

// ExceptionsDeleteInput represents exceptions delete input.
type ExceptionsDeleteInput struct {
	// Space MRN for the exceptions. NOTE: exception ids must be for the same scope. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`

	// Exception ids. Could be for asset or space scoped exceptions. (Optional.)
	ExceptionIDs *[]String `json:"exceptionIds,omitempty" tfgen:"required=0"`
}

// ExportReportFilterChecks represents input for filtering checks in the export report.
type ExportReportFilterChecks struct {
	// Enable filtering checks. (Required.)
	Enable Boolean `json:"enable" tfgen:"required=1"`
}

// ExportReportFilterInventoryInput represents input for filtering inventory in the export report.
type ExportReportFilterInventoryInput struct {
	// Enable filtering inventory. (Required.)
	Enable Boolean `json:"enable" tfgen:"required=1"`
	// Enable filtering data. (Required.)
	Data Boolean `json:"data" tfgen:"required=1"`
}

// ExportReportFilterPackages represents input for filtering packages in the export report.
type ExportReportFilterPackages struct {
	// Enable filtering packages. (Required.)
	Enable Boolean `json:"enable" tfgen:"required=1"`
}

// ExportReportFilterVulnerabilitiesInput represents input for filtering vulnerabilities in the export report.
type ExportReportFilterVulnerabilitiesInput struct {
	// Enable filtering vulnerabilities. (Required.)
	Enable Boolean `json:"enable" tfgen:"required=1"`
}

// ExportReportOptionsInput represents input options for the export report.
type ExportReportOptionsInput struct {

	// Filter inventory. (Optional.)
	Inventory *ExportReportFilterInventoryInput `json:"inventory,omitempty" tfgen:"required=0"`
	// Filter vulnerabilities. (Optional.)
	Vulnerabilities *ExportReportFilterVulnerabilitiesInput `json:"vulnerabilities,omitempty" tfgen:"required=0"`
	// Filter checks. (Optional.)
	Checks *ExportReportFilterChecks `json:"checks,omitempty" tfgen:"required=0"`
	// Filter packages. (Optional.)
	Packages *ExportReportFilterPackages `json:"packages,omitempty" tfgen:"required=0"`
}

// ExtendExceptionInput represents exception extend input.
type ExtendExceptionInput struct {
	// Id of the exception. (Required.)
	ExceptionId String `json:"exceptionId" tfgen:"required=1"`
	// Space MRN of the exception. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// RFC3339 timestamp The date, from which on the exception is no longer valid. (Required.)
	ValidUntil String `json:"validUntil" tfgen:"required=1"`

	// The justification for the exception. (Optional.)
	Justification *String `json:"justification,omitempty" tfgen:"required=0"`
}

// ExtendExceptionReviewInput represents the input to apply a review to an exception extension.
type ExtendExceptionReviewInput struct {
	// The space of the exception. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The id of the exception. (Required.)
	ExceptionId String `json:"exceptionId" tfgen:"required=1"`
	// The review action to be applied. (Required.)
	Action ExceptionReviewAction `json:"action" tfgen:"required=1"`
}

// FindingCasesFilter represents cases filters for finding.
type FindingCasesFilter struct {

	// Filter cases by their status. (Optional.)
	Statuses *[]CaseStatus `json:"statuses,omitempty" tfgen:"required=0"`
}

// FindingDocumentOptionsInput represents input options for the finding of the document.
type FindingDocumentOptionsInput struct {
	// The MRN of the finding to generate the report for. (Required.)
	FindingMrn String `json:"findingMrn" tfgen:"required=1"`
	// The MRN of the scope to generate the report for. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// FindingsFilter represents findings filters.
type FindingsFilter struct {

	// Filter by state. (Optional.)
	State *ScoreStateFilter `json:"state,omitempty" tfgen:"required=0"`
	// Optional query terms. Will return only vulnerabilities containing the term in their MRN. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// Filter the result by mrn. (Optional.)
	Mrn *String `json:"mrn,omitempty" tfgen:"required=0"`
	// Filter the result by a policy mrn. Applicable only for checks. (Optional.)
	PolicyMrn *String `json:"policyMrn,omitempty" tfgen:"required=0"`
	// Whether to include checks for CI/CD assets in the results. (Optional.)
	IncludeCicd *Boolean `json:"includeCicd,omitempty" tfgen:"required=0"`
	// Filter by score rating. (Optional.)
	Rating *[]ScoreRating `json:"rating,omitempty" tfgen:"required=0"`
	// Filter by finding type. (Optional.)
	Types *[]FindingType `json:"types,omitempty" tfgen:"required=0"`
	// Filter vulnerabilities by findingMrn of a versioned software package e.g., finding versions of bash 5.0.1 by searching for //.../software/.../name/bash/5.0.1. (Optional.)
	SoftwareFindingMrn *String `json:"softwareFindingMrn,omitempty" tfgen:"required=0"`
	// Filter by risk factor MRNs. (Optional.)
	RiskFactors *RiskFactorFilter `json:"riskFactors,omitempty" tfgen:"required=0"`
	// Filters applicable only for package findings. (Optional.)
	Package *FindingsPackagesFilter `json:"package,omitempty" tfgen:"required=0"`
	// Filter by vulnerability mrn. (Optional.)
	VulnerabilityMrn *String `json:"vulnerabilityMrn,omitempty" tfgen:"required=0"`
}

// FindingsOrder represents findings order.
type FindingsOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field FindingsOrderField `json:"field" tfgen:"required=1"`
}

// FindingsPackagesFilter represents findings packages filter.
type FindingsPackagesFilter struct {

	// Package version. (Optional.)
	PackageVersion *String `json:"packageVersion,omitempty" tfgen:"required=0"`
}

// FindingsWebhookPostRequest represents findings webhook post request.
type FindingsWebhookPostRequest struct {
	// Scope MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// Finding type. (Required.)
	Type FindingType `json:"type" tfgen:"required=1"`
	// Finding MRN. (Required.)
	FindingMrn String `json:"findingMrn" tfgen:"required=1"`
}

// ForkFrameworkInput represents fork framework input.
type ForkFrameworkInput struct {
	// The MRN of the framework to fork. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// Space MRN. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`

	// Whether to include all evidence in the bundle. By default, only evidence for activated policies is returned. (Optional.)
	AllEvidence *Boolean `json:"allEvidence,omitempty" tfgen:"required=0"`
}

// FrameworkDocumentOptionsInput represents input options for framework document.
type FrameworkDocumentOptionsInput struct {
	// The MRN of the framework. (Required.)
	FrameworkMRN String `json:"frameworkMRN" tfgen:"required=1"`
}

// GarbageCollectAssetsConfigurationInput represents garbage collect assets configuration input.
type GarbageCollectAssetsConfigurationInput struct {

	// Whether to enable garbage collection. (Optional.)
	Enable *Boolean `json:"enable,omitempty" tfgen:"required=0"`
	// After how many days to garbage collect. (Optional.)
	AfterDays *Int `json:"afterDays,omitempty" tfgen:"required=0"`
}

// GcpConfigurationOptionsInput represents gCP integration input.
type GcpConfigurationOptionsInput struct {

	// The GCP project ID. (Optional.)
	ProjectId *String `json:"projectId,omitempty" tfgen:"required=0"`
	// The GCP organization ID. (Optional.)
	OrganizationId *String `json:"organizationId,omitempty" tfgen:"required=0"`
	// note: this is the content of the service account JSON file. (Optional.)
	ServiceAccount *String `json:"serviceAccount,omitempty" tfgen:"required=0"`
	// Whether to discover all resources. (Optional.)
	DiscoverAll *Boolean `json:"discoverAll,omitempty" tfgen:"required=0"`
}

// GcsBucketConfigurationOptionsInput represents gCS Bucket integration input.
type GcsBucketConfigurationOptionsInput struct {
	// The output format for the GCS bucket. (Required.)
	Output BucketOutputType `json:"output" tfgen:"required=1"`
	// The GCS bucket name. (Required.)
	Bucket String `json:"bucket" tfgen:"required=1"`
	// note: this is the content of the service account JSON file. (Required.)
	ServiceAccount String `json:"serviceAccount" tfgen:"required=1"`
}

// GenerateAPITokenInput represents input for generating a new API token.
type GenerateAPITokenInput struct {
	// The name of the API token. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// The MRN of the space (deprecated, use scopeMrn). (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// The MRN of the scope for the API token. (Optional.)
	ScopeMrn *String `json:"scopeMrn,omitempty" tfgen:"required=0"`
	// The description of the API token. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// The roles to assign to the API token. (Optional.)
	Roles *[]RoleInput `json:"roles,omitempty" tfgen:"required=0"`
}

// GenerateDocumentInput represents input when generating a document.
type GenerateDocumentInput struct {
	// The MRN of the space. (Required.)
	ScopeMRN String `json:"scopeMRN" tfgen:"required=1"`
	// The format of the document. (Required.)
	Format DocumentFormat `json:"format" tfgen:"required=1"`
	// The type of the document. (Required.)
	Type DocumentType `json:"type" tfgen:"required=1"`
	// The name of the document to generate. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// The MRN of the resource for which the document is being generated. (Optional.)
	TargetMRN *String `json:"targetMRN,omitempty" tfgen:"required=0"`
	// Options for generating a framework document. (Optional.)
	FrameworkOptions *FrameworkDocumentOptionsInput `json:"frameworkOptions,omitempty" tfgen:"required=0"`
	// Options for generating a control document. (Optional.)
	ControlOptions *ControlDocumentOptionsInput `json:"controlOptions,omitempty" tfgen:"required=0"`
	// Options for generating an asset report document. (Optional.)
	AssetReportOptions *AssetDocumentOptionsInput `json:"assetReportOptions,omitempty" tfgen:"required=0"`
	// Options for generating an advisory report document. (Optional.)
	AdvisoryReportOptions *AdvisoryDocumentOptionsInput `json:"advisoryReportOptions,omitempty" tfgen:"required=0"`
	// Options for generating a vulnerability report document. (Optional.)
	VulnerabilityReportOptions *VulnerabilityDocumentOptionsInput `json:"vulnerabilityReportOptions,omitempty" tfgen:"required=0"`
	// Options for generating a finding report document. (Optional.)
	FindingReportOptions *FindingDocumentOptionsInput `json:"findingReportOptions,omitempty" tfgen:"required=0"`
	// Options for generating a scope report document. (Optional.)
	ScopeReportOptions *ScopeDocumentOptionsInput `json:"scopeReportOptions,omitempty" tfgen:"required=0"`
	// Options for generating an export document. (Optional.)
	ExportOptions *ExportReportOptionsInput `json:"exportOptions,omitempty" tfgen:"required=0"`
	// Whether to capture debug information. (Optional.)
	CaptureDebug *Boolean `json:"captureDebug,omitempty" tfgen:"required=0"`
}

// GeneratePolicyInput represents input type for GeneratePolicyInput.
type GeneratePolicyInput struct {
	// Scope mrn. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// Prompt for policy generation. (Required.)
	Prompts []String `json:"prompts" tfgen:"required=1"`
	// Providers to use for policy generation. (Required.)
	Providers []String `json:"providers" tfgen:"required=1"`

	// Indicates if the generated policy should be stored in the space. (Optional.)
	StoreInSpace *Boolean `json:"storeInSpace,omitempty" tfgen:"required=0"`
}

// GetClientIntegrationDeleteCommandInput represents inputs used to get the delete command for a client integration (used for K8s).
type GetClientIntegrationDeleteCommandInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// (Required.)
	Type ClientIntegrationType `json:"type" tfgen:"required=1"`
}

// GetClientIntegrationTokenInput represents input provided when fetching a token for a client integration.
type GetClientIntegrationTokenInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// (Optional.)
	LongLivedToken *Boolean `json:"longLivedToken,omitempty" tfgen:"required=0"`
}

// GithubConfigurationOptionsInput represents github integration input.
type GithubConfigurationOptionsInput struct {
	// The type of GitHub integration. (Required.)
	Type GithubIntegrationType `json:"type" tfgen:"required=1"`

	// Repository owner. Must be provided in combination with repository. (Optional.)
	Owner *String `json:"owner,omitempty" tfgen:"required=0"`
	// Repository name. Must be provided in combination with owner. (Optional.)
	Repository *String `json:"repository,omitempty" tfgen:"required=0"`
	// Organization. If specified, the integration will scan the complete organization. (Optional.)
	Organization *String `json:"organization,omitempty" tfgen:"required=0"`
	// The GitHub API token (optional). (Optional.)
	Token *String `json:"token,omitempty" tfgen:"required=0"`
	// Scan only the repositories matching these glob patterns. Only applicable when type is ORG. (Optional.)
	ReposAllowList *[]String `json:"reposAllowList,omitempty" tfgen:"required=0"`
	// Scan all repositories except the ones matching these glob patterns. Only applicable when type is ORG. (Optional.)
	ReposDenyList *[]String `json:"reposDenyList,omitempty" tfgen:"required=0"`
	// Discover Terraform files in the repositories. (Optional.)
	DiscoverTerraform *Boolean `json:"discoverTerraform,omitempty" tfgen:"required=0"`
	// Discover k8s manifests in the repositories. (Optional.)
	DiscoverK8sManifests *Boolean `json:"discoverK8sManifests,omitempty" tfgen:"required=0"`
	// Github Enterprise Server URL. (Optional.)
	EnterpriseUrl *String `json:"enterpriseUrl,omitempty" tfgen:"required=0"`
}

// GithubTicketConfigInput represents github ticket configuration input.
type GithubTicketConfigInput struct {
	// The Github repo owner. (Required.)
	Owner String `json:"owner" tfgen:"required=1"`
	// The Github repo. (Required.)
	Repo String `json:"repo" tfgen:"required=1"`
}

// GithubTicketingConfigurationOptionsInput represents github ticketing integration input.
type GithubTicketingConfigurationOptionsInput struct {
	// The GitHub API token. (Required.)
	Token String `json:"token" tfgen:"required=1"`
	// Whether to auto-close tickets. (Required.)
	AutoCloseTickets Boolean `json:"autoCloseTickets" tfgen:"required=1"`
	// Whether to auto-create tickets. (Required.)
	AutoCreateTickets Boolean `json:"autoCreateTickets" tfgen:"required=1"`

	// The GitHub Enterprise URL. (Optional.)
	EnterpriseUrl *String `json:"enterpriseUrl,omitempty" tfgen:"required=0"`
	// The default repository owner. (Optional.)
	DefaultRepoOwner *String `json:"defaultRepoOwner,omitempty" tfgen:"required=0"`
	// The default repository name. (Optional.)
	DefaultRepoName *String `json:"defaultRepoName,omitempty" tfgen:"required=0"`
}

// GitlabConfigurationOptionsInput represents gitlab integration input.
type GitlabConfigurationOptionsInput struct {
	// (Required.)
	Type GitlabIntegrationType `json:"type" tfgen:"required=1"`

	// (Optional.)
	Group *String `json:"group,omitempty" tfgen:"required=0"`
	// (Optional.)
	Token *String `json:"token,omitempty" tfgen:"required=0"`
	// (Optional.)
	DiscoverGroups *Boolean `json:"discoverGroups,omitempty" tfgen:"required=0"`
	// (Optional.)
	DiscoverProjects *Boolean `json:"discoverProjects,omitempty" tfgen:"required=0"`
	// (Optional.)
	DiscoverTerraform *Boolean `json:"discoverTerraform,omitempty" tfgen:"required=0"`
	// (Optional.)
	DiscoverK8sManifests *Boolean `json:"discoverK8sManifests,omitempty" tfgen:"required=0"`
	// (Optional.)
	BaseUrl *String `json:"baseUrl,omitempty" tfgen:"required=0"`
}

// GitlabTicketConfigInput represents gitlab ticket configuration input.
type GitlabTicketConfigInput struct {
	// The Gitlab project. (Required.)
	Project String `json:"project" tfgen:"required=1"`
}

// GitlabTicketingConfigurationOptionsInput represents gitlab ticketing integration input.
type GitlabTicketingConfigurationOptionsInput struct {
	// The GitLab API token. (Required.)
	Token String `json:"token" tfgen:"required=1"`
	// Whether to auto-close tickets. (Required.)
	AutoCloseTickets Boolean `json:"autoCloseTickets" tfgen:"required=1"`
	// Whether to auto-create tickets. (Required.)
	AutoCreateTickets Boolean `json:"autoCreateTickets" tfgen:"required=1"`

	// The GitLab base URL. (Optional.)
	BaseUrl *String `json:"baseUrl,omitempty" tfgen:"required=0"`
	// The default GitLab project. (Optional.)
	DefaultProject *String `json:"defaultProject,omitempty" tfgen:"required=0"`
}

// GoogleWorkspaceConfigurationOptionsInput represents google Workspace integration input.
type GoogleWorkspaceConfigurationOptionsInput struct {
	// The Google Workspace customer ID. (Required.)
	CustomerId String `json:"customerId" tfgen:"required=1"`
	// The impersonated user email. (Required.)
	ImpersonatedUserEmail String `json:"impersonatedUserEmail" tfgen:"required=1"`

	// note: this is the content of the service account JSON file. (Optional.)
	ServiceAccount *String `json:"serviceAccount,omitempty" tfgen:"required=0"`
}

// GroupFilter represents group filter.
type GroupFilter struct {
	// Group type. (Required.)
	GroupType String `json:"groupType" tfgen:"required=1"`

	// Asset types. (Optional.)
	AssetTypes *[]String `json:"assetTypes,omitempty" tfgen:"required=0"`
}

// HostConfigurationOptionsInput represents host integration input.
type HostConfigurationOptionsInput struct {
	// The host address. (Required.)
	Host String `json:"host" tfgen:"required=1"`

	// Whether to use HTTPS. (Optional.)
	Https *Boolean `json:"https,omitempty" tfgen:"required=0"`
	// Whether to use HTTP. (Optional.)
	Http *Boolean `json:"http,omitempty" tfgen:"required=0"`
}

// HostedAwsConfigurationOptionsInput represents hosted AWS integration input.
type HostedAwsConfigurationOptionsInput struct {

	// The key credential for the hosted AWS integration. (Optional.)
	KeyCredential *AWSSecretKeyCredential `json:"keyCredential,omitempty" tfgen:"required=0"`
	// The role credential for the hosted AWS integration. (Optional.)
	RoleCredential *AWSRoleCredential `json:"roleCredential,omitempty" tfgen:"required=0"`
}

// IDSuggestionInput represents iD suggestion input.
type IDSuggestionInput struct {

	// Parent MRN. (Optional.)
	ParentMrn *String `json:"parentMrn,omitempty" tfgen:"required=0"`
	// ID available. (Optional.)
	IdAvailable *String `json:"idAvailable,omitempty" tfgen:"required=0"`
}

// IdentityFilter represents identity filter for auditlog queries.
type IdentityFilter struct {

	// Filter by identity MRN. (Optional.)
	Mrn *String `json:"mrn,omitempty" tfgen:"required=0"`
	// Filter by identity name. (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
}

// IntegrationInput represents input options provided when creating a chatops integration.
type IntegrationInput struct {
	// The MRN of the integration. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The name of the integration. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// Whether the integration is enabled. (Required.)
	Enabled Boolean `json:"enabled" tfgen:"required=1"`

	// Options for the integration. (Optional.)
	Options *IntegrationOptionsInput `json:"options,omitempty" tfgen:"required=0"`
}

// IntegrationOptionsInput represents options for chatops integration.
type IntegrationOptionsInput struct {

	// The URL for the integration. (Optional.)
	Url *String `json:"url,omitempty" tfgen:"required=0"`
	// The chat ID for the integration. (Optional.)
	Chatid *String `json:"chatid,omitempty" tfgen:"required=0"`
	// The token for the integration. (Optional.)
	Token *String `json:"token,omitempty" tfgen:"required=0"`
	// The notification type for the integration. (Optional.)
	NotificationType *NotificationType `json:"notificationType,omitempty" tfgen:"required=0"`
}

// IntegrationsSummaryInput represents input for summary of client integrations.
type IntegrationsSummaryInput struct {
	// (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
}

// InvitationOrder represents input for ordering invitations.
type InvitationOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field InvitationOrderField `json:"field" tfgen:"required=1"`
}

// JiraConfigurationOptionsInput represents jira integration input.
type JiraConfigurationOptionsInput struct {
	// The Jira host URL. (Required.)
	Host String `json:"host" tfgen:"required=1"`
	// The Jira user email. (Required.)
	Email String `json:"email" tfgen:"required=1"`
	// The Jira API token. (Required.)
	ApiToken String `json:"apiToken" tfgen:"required=1"`
	// The default Jira project. (Required.)
	DefaultProject String `json:"defaultProject" tfgen:"required=1"`

	// Whether to auto-close tickets. (Optional.)
	AutoCloseTickets *Boolean `json:"autoCloseTickets,omitempty" tfgen:"required=0"`
	// Whether to auto-create cases. (Optional.)
	AutoCreateCases *Boolean `json:"autoCreateCases,omitempty" tfgen:"required=0"`
}

// JiraTicketConfigInput represents jira ticket configuration input.
type JiraTicketConfigInput struct {
	// The Jira project key. (Required.)
	ProjectKey String `json:"projectKey" tfgen:"required=1"`
	// The Jira issue type. (Required.)
	IssueType String `json:"issueType" tfgen:"required=1"`
}

// JiraTicketContextInput represents parameters for JiraTicketContext.
type JiraTicketContextInput struct {
	// The type of the ticket context. (Required.)
	Type JiraTicketContextType `json:"type" tfgen:"required=1"`

	// The parameters for the ticket context. (Optional.)
	Projects *JiraTicketContextProjectsInput `json:"projects,omitempty" tfgen:"required=0"`
	// The parameters for the ticket context. (Optional.)
	Users *JiraTicketContextUsersInput `json:"users,omitempty" tfgen:"required=0"`
}

// JiraTicketContextProjectsInput represents jira Projects filter parameters for JiraTicketContext.
type JiraTicketContextProjectsInput struct {

	// The Jira query to filter the projects by. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
}

// JiraTicketContextUsersInput represents jira Users filter parameters for JiraTicketContext.
type JiraTicketContextUsersInput struct {
	// The Jira project key to filter the users by. (Required.)
	ProjectKey String `json:"projectKey" tfgen:"required=1"`

	// The query to filter the users by. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
}

// K8sConfigurationOptionsInput represents k8s integration input.
type K8sConfigurationOptionsInput struct {
	// Whether to scan nodes. (Required.)
	ScanNodes Boolean `json:"scanNodes" tfgen:"required=1"`
	// Whether to scan workloads. (Required.)
	ScanWorkloads Boolean `json:"scanWorkloads" tfgen:"required=1"`
	// Whether to scan deployments. (Required.)
	ScanDeploys Boolean `json:"scanDeploys" tfgen:"required=1"`

	// The style of node scanning. (Optional.)
	ScanNodesStyle *K8sScanNodesStyle `json:"scanNodesStyle,omitempty" tfgen:"required=0"`
	// The certificate manager to use. (Optional.)
	CertificateManager *String `json:"certificateManager,omitempty" tfgen:"required=0"`
	// Whether to scan public images. (Optional.)
	ScanPublicImages *Boolean `json:"scanPublicImages,omitempty" tfgen:"required=0"`
	// A list of allowed namespaces. (Optional.)
	NamespaceAllowList *[]String `json:"namespaceAllowList,omitempty" tfgen:"required=0"`
	// A list of denied namespaces. (Optional.)
	NamespaceDenyList *[]String `json:"namespaceDenyList,omitempty" tfgen:"required=0"`
}

// KeyValueInput represents input for key-value pair.
type KeyValueInput struct {
	// The key of the key-value pair. (Required.)
	Key String `json:"key" tfgen:"required=1"`

	// The value of the key-value pair. (Optional.)
	Value *String `json:"value,omitempty" tfgen:"required=0"`
}

// ListClientIntegrationsFilterInput represents listClientIntegrationsFilterInput provides filtering options for listing the client integrations.
type ListClientIntegrationsFilterInput struct {

	// type is deprecated, use types. (Optional.)
	Type *ClientIntegrationType `json:"type,omitempty" tfgen:"required=0"`
	// The list of integration types. (Optional.)
	Types *[]*ClientIntegrationType `json:"types,omitempty" tfgen:"required=0"`
	// The managed clients filters. (Optional.)
	ManagedClientsFilters *ManagedClientsFilters `json:"managedClientsFilters,omitempty" tfgen:"required=0"`
}

// ListClientIntegrationsInput represents listClientIntegrationsInput describes the input for listing the integrations.
type ListClientIntegrationsInput struct {
	// The space MRN. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`

	// The filter query. (Optional.)
	FilterQuery *ListClientIntegrationsFilterInput `json:"filterQuery,omitempty" tfgen:"required=0"`
}

// ListDiscoveryResultsInput represents list discovery results input.
type ListDiscoveryResultsInput struct {
	// The mrn is a unique identifier. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// ListExceptionGroupsFilter represents list exception groups filters.
type ListExceptionGroupsFilter struct {

	// Filter by review status. (Optional.)
	ReviewStatuses *[]ReviewStatus `json:"reviewStatuses,omitempty" tfgen:"required=0"`
	// Filter by valid until date. Input is string date. The BE logic is exception.ValidUntil <= filter.validUntil. (Optional.)
	ValidUntil *String `json:"validUntil,omitempty" tfgen:"required=0"`
	// Filter by id of exception group. (Optional.)
	Id *String `json:"id,omitempty" tfgen:"required=0"`
	// Filter by validUntil time range. (Optional.)
	ValidUntilRange *TimeRange `json:"validUntilRange,omitempty" tfgen:"required=0"`
	// Include soft deleted exceptions. (Optional.)
	IncludeDeleted *Boolean `json:"includeDeleted,omitempty" tfgen:"required=0"`
	// Include exception extensions. (Optional.)
	IncludeExtension *Boolean `json:"includeExtension,omitempty" tfgen:"required=0"`
}

// ListExceptionGroupsInput represents the input to get a list of exception groups.
type ListExceptionGroupsInput struct {
	// The mrn of the space/asset. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// The mrn to filter on. It can be a query, control, policy or a framework. (Optional.)
	Mrn *String `json:"mrn,omitempty" tfgen:"required=0"`
	// The types of the exceptions. (Optional.)
	Types *[]ExceptionType `json:"types,omitempty" tfgen:"required=0"`
	// The action of the exception groups. Empty list means all. (Optional.)
	Actions *[]ExceptionMutationAction `json:"actions,omitempty" tfgen:"required=0"`
	// Order by. If not provided the default ordering is by valid until and uid asc. (Optional.)
	OrderBy *ListExceptionGroupsOrder `json:"orderBy,omitempty" tfgen:"required=0"`
	// Additional filters. (Optional.)
	Filter *ListExceptionGroupsFilter `json:"filter,omitempty" tfgen:"required=0"`
	// Flag indicating whether to include exceptions in child scopes If scopeMrn is a space and this flag is true, all exceptions defined on the space and on all of the space's assets will be returned. (Optional.)
	IncludeChildScopes *Boolean `json:"includeChildScopes,omitempty" tfgen:"required=0"`
}

// ListExceptionGroupsOrder represents exception groups order.
type ListExceptionGroupsOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field ListExceptionGroupsOrderField `json:"field" tfgen:"required=1"`
}

// ListFrameworksInput represents list frameworks input.
type ListFrameworksInput struct {
	// The scope mrn for which to fetch frameworks. Currently only supported is a space mrn. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// The framework state to filter by. (Required.)
	FilterState ListFrameworksFilterState `json:"filterState" tfgen:"required=1"`
}

// ManagedClientsFilters represents filters that can be used when listing managed clients.
type ManagedClientsFilters struct {

	// The list of query strings. (Optional.)
	QueryStrings *[]String `json:"queryStrings,omitempty" tfgen:"required=0"`
	// The list of agent versions. (Optional.)
	Version *[]AgentVersionFilter `json:"version,omitempty" tfgen:"required=0"`
	// The list of agent states. (Optional.)
	State *[]AgentState `json:"state,omitempty" tfgen:"required=0"`
	// The order by field. (Optional.)
	OrderBy *AgentOrder `json:"orderBy,omitempty" tfgen:"required=0"`
}

// MembershipOrder represents input for ordering memberships.
type MembershipOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field MembershipOrderField `json:"field" tfgen:"required=1"`
}

// MicrosoftDefenderConfigurationOptionsInput represents microsoft Defender integration input.
type MicrosoftDefenderConfigurationOptionsInput struct {
	// tenantId of the MS Defender instance. (Required.)
	TenantId String `json:"tenantId" tfgen:"required=1"`
	// clientId of the MS Defender instance. (Required.)
	ClientId String `json:"clientId" tfgen:"required=1"`

	// subscriptionsAllowlist is a list of subscription IDs to include in the scan. (Optional.)
	SubscriptionsAllowlist *[]String `json:"subscriptionsAllowlist,omitempty" tfgen:"required=0"`
	// subscriptionsDenylist is a list of subscription IDs to exclude from the scan. (Optional.)
	SubscriptionsDenylist *[]String `json:"subscriptionsDenylist,omitempty" tfgen:"required=0"`
	// certificate or client secret is required. (Optional.)
	Certificate *String `json:"certificate,omitempty" tfgen:"required=0"`
	// password used for authentication. (Optional.)
	ClientSecret *String `json:"clientSecret,omitempty" tfgen:"required=0"`
	// createAssets is a flag to create assets in the backend when they are not found. (Optional.)
	CreateAssets *Boolean `json:"createAssets,omitempty" tfgen:"required=0"`
}

// ModifyRiskFactorInput represents modify risk factor input.
type ModifyRiskFactorInput struct {
	// Risk factor mrn. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// Risk factor magnitude modification. (Optional.)
	Magnitude *RiskFactorMagnitudeModification `json:"magnitude,omitempty" tfgen:"required=0"`
	// (Optional.)
	Action *RiskFactorAction `json:"action,omitempty" tfgen:"required=0"`
	// Asset field filters mutation. (Optional.)
	AssetFieldFiltersMutation *AssetFieldFiltersMutation `json:"assetFieldFiltersMutation,omitempty" tfgen:"required=0"`
}

// MqueryAssetDataInput represents mquery asset data input.
type MqueryAssetDataInput struct {
	// scopeMrn is the MRN of the space in which to search for assets. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// queryMrn is the MRN of the query to run. (Required.)
	QueryMrn String `json:"queryMrn" tfgen:"required=1"`

	// See AssetSearchInput. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// Format. (Optional.)
	Format *MqueryAssetDataFormat `json:"format,omitempty" tfgen:"required=0"`
}

// MqueryAssetScoresInput represents mquery asset scores input.
type MqueryAssetScoresInput struct {
	// scopeMrn is the MRN of the space in which to search for assets. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// queryMrn is the MRN of the query to run. (Required.)
	QueryMrn String `json:"queryMrn" tfgen:"required=1"`

	// See AssetSearchInput. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// After is the pagination cursor. To paginate to the end of the search results, keep calling search the the endCursor from the pageInfo response while the hasNextPage field is true. (Optional.)
	After *String `json:"after,omitempty" tfgen:"required=0"`
	// Limit is the number of items to return. Defaults to 25. (Optional.)
	Limit *Int `json:"limit,omitempty" tfgen:"required=0"`
	// Order by. (Optional.)
	OrderBy *AssetOrder `json:"orderBy,omitempty" tfgen:"required=0"`
	// policyMrn is the MRN of the policy which the query is associated with. If this is provided, the queryMrn will be converted to a code id. This is temporary. We need to capture scores as MRNs, not code ids. Until that happens, we need this. (Optional.)
	PolicyMrn *String `json:"policyMrn,omitempty" tfgen:"required=0"`
}

// MqueryInput represents mqueryInput.
type MqueryInput struct {
	// The mrn is a unique identifier. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// MqueryScoreInput represents mquery score input.
type MqueryScoreInput struct {
	// scopeMrn is the MRN of the space in which to search for assets. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
	// queryMrn is the MRN of the query to run. (Required.)
	QueryMrn String `json:"queryMrn" tfgen:"required=1"`
}

// Ms365ConfigurationOptionsInput represents mS365 integration input.
type Ms365ConfigurationOptionsInput struct {
	// The MS365 tenant ID. (Required.)
	TenantId String `json:"tenantId" tfgen:"required=1"`
	// The MS365 client ID. (Required.)
	ClientId String `json:"clientId" tfgen:"required=1"`

	// TODO: temporary optional, fix by having separate update models. (Optional.)
	Certificate *String `json:"certificate,omitempty" tfgen:"required=0"`
}

// MvdExperimentalSourcesConfigurationInput represents mVD experimental sources configuration.
type MvdExperimentalSourcesConfigurationInput struct {

	// Enabled sources. (Optional.)
	EnabledSources *[]MvdSourceInput `json:"enabledSources,omitempty" tfgen:"required=0"`
}

// MvdSourceInput represents mVD source input.
type MvdSourceInput struct {
	// ID. (Required.)
	Id String `json:"id" tfgen:"required=1"`
}

// OciConfigurationOptionsInput represents oCI integration input.
type OciConfigurationOptionsInput struct {
	// The tenancy OCID for the OCI integration. (Required.)
	TenancyOcid String `json:"tenancyOcid" tfgen:"required=1"`
	// The user OCID for the OCI integration. (Required.)
	UserOcid String `json:"userOcid" tfgen:"required=1"`
	// The region for the OCI integration. (Required.)
	Region String `json:"region" tfgen:"required=1"`
	// The fingerprint for the OCI integration. (Required.)
	Fingerprint String `json:"fingerprint" tfgen:"required=1"`

	// The private key for the OCI integration (optional). (Optional.)
	PrivateKey *String `json:"privateKey,omitempty" tfgen:"required=0"`
}

// OktaConfigurationOptionsInput represents okta integration input.
type OktaConfigurationOptionsInput struct {
	// The Okta organization name. (Required.)
	Organization String `json:"organization" tfgen:"required=1"`

	// The Okta API token (optional). (Optional.)
	Token *String `json:"token,omitempty" tfgen:"required=0"`
}

// OrgViewPageInfo represents org view page info.
type OrgViewPageInfo struct {
	// Organization MRN. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
}

// OrganizationOverviewInput represents organization overview input.
type OrganizationOverviewInput struct {
	// Organization MRN. (Required.)
	OrganizationMrn String `json:"organizationMrn" tfgen:"required=1"`
}

// PackageFilter represents package filters.
type PackageFilter struct {

	// filter by textfield input. ex.: ["Chrome", "Firefox"] elements will be ANDed. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// os package or app. (Optional.)
	Type *PackageType `json:"type,omitempty" tfgen:"required=0"`
	// is package affected by a CVE?. (Optional.)
	IsVulnerable *Boolean `json:"isVulnerable,omitempty" tfgen:"required=0"`
	// packageName is a filter with exact match The queryTerms are a "contains" search. That's useful for the general search. But for the softwareDetails we need to search for the exact package name. (Optional.)
	PackageName *String `json:"packageName,omitempty" tfgen:"required=0"`
}

// PackageInput represents package input.
type PackageInput struct {
	// Package name. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// Package version. (Required.)
	Version String `json:"version" tfgen:"required=1"`

	// Package arch. (Optional.)
	Arch *String `json:"arch,omitempty" tfgen:"required=0"`
	// Package format. (Optional.)
	Format *String `json:"format,omitempty" tfgen:"required=0"`
	// Package origin, needed for debian. (Optional.)
	Origin *String `json:"origin,omitempty" tfgen:"required=0"`
}

// PackageReferenceInput represents represents a package reference which can be used to filter remediaiton scripts.
type PackageReferenceInput struct {
	// The name of the package to filter remediations for. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// The version of the package to filter remediations for. This is optional and can be used to filter remediations for a specific version of the package. (Optional.)
	Version *String `json:"version,omitempty" tfgen:"required=0"`
}

// PackageScoresFilter represents package filters.
type PackageScoresFilter struct {

	// filter by textfield input. ex.: ["Chrome", "Firefox"] elements will be ANDed. (Optional.)
	QueryTerms *[]String `json:"queryTerms,omitempty" tfgen:"required=0"`
	// os package or app. (Optional.)
	Type *PackageType `json:"type,omitempty" tfgen:"required=0"`
	// is package affected by a CVE?. (Optional.)
	IsVulnerable *Boolean `json:"isVulnerable,omitempty" tfgen:"required=0"`
	// Package version. (Optional.)
	PackageVersion *String `json:"packageVersion,omitempty" tfgen:"required=0"`
}

// PackageScoresInput represents packageScores input data This requires either a spaceMrn AND a findingMrn OR only an assetMrn.
type PackageScoresInput struct {

	// Space MRN. (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// Package/Finding mrn. (Optional.)
	FindingMrn *String `json:"findingMrn,omitempty" tfgen:"required=0"`
	// Asset or Space MRN. (Optional.)
	EntityMrn *String `json:"entityMrn,omitempty" tfgen:"required=0"`
	// Package version (optional). (Optional.)
	PackageVersion *String `json:"packageVersion,omitempty" tfgen:"required=0"`
	// Filter. (Optional.)
	Filter *PackageScoresFilter `json:"filter,omitempty" tfgen:"required=0"`
}

// PackageScoresOrder represents packageScores order.
type PackageScoresOrder struct {
	// Order direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Order field. (Required.)
	Field PackageScoresOrderField `json:"field" tfgen:"required=1"`
}

// PackagesOrder represents package order object.
type PackagesOrder struct {
	// Order direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Order field. (Required.)
	Field PackagesOrderField `json:"field" tfgen:"required=1"`
}

// PerformDiscoveryInput represents input options for discovery job on client integration.
type PerformDiscoveryInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// PingIntegrationInput represents inputs used to ping a client integration.
type PingIntegrationInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// Optional source identifier, e.g. AWS account id. (Optional.)
	Identifiers *[]String `json:"identifiers,omitempty" tfgen:"required=0"`
}

// PlatformInput represents platform input.
type PlatformInput struct {

	// The name of the platform. (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
	// The release of the platform. (Optional.)
	Release *String `json:"release,omitempty" tfgen:"required=0"`
	// The build of the platform. (Optional.)
	Build *String `json:"build,omitempty" tfgen:"required=0"`
	// The architecture of the platform. (Optional.)
	Arch *String `json:"arch,omitempty" tfgen:"required=0"`
	// The kind of the platform. (Optional.)
	Kind *PlatformKind `json:"kind,omitempty" tfgen:"required=0"`
	// The runtime of the platform. (Optional.)
	Runtime *String `json:"runtime,omitempty" tfgen:"required=0"`
	// The labels of the platform. (Optional.)
	Labels *[]*KeyValueInput `json:"labels,omitempty" tfgen:"required=0"`
	// The platform families. (Optional.)
	Family *[]*String `json:"family,omitempty" tfgen:"required=0"`
}

// PlatformMqlVexConfigurationInput represents platform MQL VEX configuration input.
type PlatformMqlVexConfigurationInput struct {

	// Whether to enable platform MQL VEX analysis. (Optional.)
	Enable *Boolean `json:"enable,omitempty" tfgen:"required=0"`
}

// PlatformVulnerabilityConfigurationInput represents platform vulnerability configuration input.
type PlatformVulnerabilityConfigurationInput struct {

	// Whether to enable platform vulnerability analysis. (Optional.)
	Enable *Boolean `json:"enable,omitempty" tfgen:"required=0"`
}

// PlatformsListInput represents input for retrieving a list of platforms for the scope.
type PlatformsListInput struct {
	// scopeMrn is the space mrn the user is requesting platforms for. The returned response will contain all public platforms unioned with platforms appearing in content for this space. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// PolicyAddInput represents policyAddInput.
type PolicyAddInput struct {
	// The mrn of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// RFC2397, base64 encoded policy bundle. (Required.)
	Dataurl String `json:"dataurl" tfgen:"required=1"`

	// Force. (Optional.)
	Force *Boolean `json:"force,omitempty" tfgen:"required=0"`
}

// PolicyAssignmentInput represents policy assignment input.
type PolicyAssignmentInput struct {
	// The mrn of the asset. (Required.)
	AssetMrn String `json:"assetMrn" tfgen:"required=1"`

	// The mrn of the policy. (Optional.)
	PolicyMrn *String `json:"policyMrn,omitempty" tfgen:"required=0"`
	// Policy MRNs. (Optional.)
	PolicyMrns *[]String `json:"policyMrns,omitempty" tfgen:"required=0"`
	// Action. (Optional.)
	Action *PolicyAction `json:"action,omitempty" tfgen:"required=0"`
	// Scoring System. (Optional.)
	ScoringSystem *ScoringSystem `json:"scoringSystem,omitempty" tfgen:"required=0"`
}

// PolicyDeleteInput represents policy delete input.
type PolicyDeleteInput struct {
	// The mrn of the policy. (Required.)
	PolicyMrn String `json:"policyMrn" tfgen:"required=1"`
}

// PolicyInput represents policyInput.
type PolicyInput struct {

	// The mrn is a unique identifier. (Optional.)
	Mrn *String `json:"mrn,omitempty" tfgen:"required=0"`
	// spaceMrn must be provided if you want to know if the policy is assigned. (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// variant. (Optional.)
	Variant *String `json:"variant,omitempty" tfgen:"required=0"`
	// variantPlatformFilter allows filter the variants by a target platform id. (Optional.)
	VariantPlatformFilter *String `json:"variantPlatformFilter,omitempty" tfgen:"required=0"`
}

// PolicyReportMquerySummaryOrder represents policy report mquery summary order.
type PolicyReportMquerySummaryOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field PolicyReportMquerySummaryOrderField `json:"field" tfgen:"required=1"`
}

// PolicyReportSummaryOrder represents policy report summary order.
type PolicyReportSummaryOrder struct {
	// Direction. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// Field. (Required.)
	Field PolicyReportSummaryOrderField `json:"field" tfgen:"required=1"`
}

// PostgresConfigurationOptionsInput represents postgres integration input.
type PostgresConfigurationOptionsInput struct {
	// The Postgres host address. (Required.)
	Host String `json:"host" tfgen:"required=1"`
	// The Postgres port. (Required.)
	Port String `json:"port" tfgen:"required=1"`
	// The Postgres database name. (Required.)
	Database String `json:"database" tfgen:"required=1"`
	// The Postgres user name. (Required.)
	User String `json:"user" tfgen:"required=1"`
	// The Postgres password. (Required.)
	Password String `json:"password" tfgen:"required=1"`
}

// ProcessCaseEventsInput represents process case events input.
type ProcessCaseEventsInput struct {
	// MRN of the scope to process events for. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// PropertyQueryMutationInput represents property query mutation input.
type PropertyQueryMutationInput struct {
	// Target to apply scoring mutation to. Can be an space/asset mrn. Or an asset filter. (Required.)
	Target PropertyQueryMutationTarget `json:"target" tfgen:"required=1"`
	// The action to apply. (Required.)
	Action PropertyQueryMutationAction `json:"action" tfgen:"required=1"`

	// A list of properties to apply the action to. (Optional.)
	Props *[]PropertyQueryOverride `json:"props,omitempty" tfgen:"required=0"`
}

// PropertyQueryMutationTarget represents the target can be a mrn (space mrn) or a filter query. It is only valid to provide one of the parameters.
type PropertyQueryMutationTarget struct {

	// MRN of the target. For example, a space MRN, or asset MRN. (Optional.)
	Mrn *String `json:"mrn,omitempty" tfgen:"required=0"`
	// For a future iteration. The mql for the filter to apply properties to. (Optional.)
	Filter *String `json:"filter,omitempty" tfgen:"required=0"`
}

// PropertyQueryOverride represents property query override.
type PropertyQueryOverride struct {
	// The property to apply the action to. (Required.)
	PropertyMrn String `json:"propertyMrn" tfgen:"required=1"`

	// The property query. Must be provided for the SET and CHECK actions. It must not be provided for the UNSET action. (Optional.)
	Mql *String `json:"mql,omitempty" tfgen:"required=0"`
}

// QueryPackAddInput represents query pack add input.
type QueryPackAddInput struct {
	// The mrn of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// RFC2397, base64 encoded policy bundle. (Required.)
	Dataurl String `json:"dataurl" tfgen:"required=1"`

	// Force. (Optional.)
	Force *Boolean `json:"force,omitempty" tfgen:"required=0"`
}

// RatedPoliciesInput represents rated policies input.
type RatedPoliciesInput struct {
	// The mrn of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`

	// Count. (Optional.)
	Count *Int `json:"count,omitempty" tfgen:"required=0"`
}

// RegistrationTokenInput represents input for generating a new registration token.
type RegistrationTokenInput struct {

	// The MRN of the space (deprecated, use scopeMrn). (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// The MRN of the scope for the registration token. (Optional.)
	ScopeMrn *String `json:"scopeMrn,omitempty" tfgen:"required=0"`
	// Optional setting of the expiration time, if not set the token will not expire. (Optional.)
	ExpiresIn *Int `json:"expiresIn,omitempty" tfgen:"required=0"`
	// Optional setting if the token should not be expired. (Optional.)
	NoExpiration *Boolean `json:"noExpiration,omitempty" tfgen:"required=0"`
	// Optional description for the registration token. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// Optional roles to attach to the registration token. (Optional.)
	Roles *[]RoleInput `json:"roles,omitempty" tfgen:"required=0"`
	// Optional labels for the registration token. (Optional.)
	Labels *[]KeyValueInput `json:"labels,omitempty" tfgen:"required=0"`
}

// RegistrationTokenOrder represents input for ordering registration tokens.
type RegistrationTokenOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field RegistrationTokenOrderField `json:"field" tfgen:"required=1"`
}

// RemediationFilter represents filter the remediation scripts.
type RemediationFilter struct {

	// filter by remediation script type. (Optional.)
	ScriptTypes *[]*RemediationScriptType `json:"scriptTypes,omitempty" tfgen:"required=0"`
	// filter by package namespace, e.g., ubuntu:18.04. (Optional.)
	Namespace *String `json:"namespace,omitempty" tfgen:"required=0"`
	// filter by package ecosystem, e.g., AmazonLinux:2023 It is the ecosystem.ID in the RemediationResponse. (Optional.)
	Ecosystem *String `json:"ecosystem,omitempty" tfgen:"required=0"`
	// filter by affected assets and their packages. (Optional.)
	FilterAffected *Boolean `json:"filterAffected,omitempty" tfgen:"required=0"`
}

// RemediationInput represents input for the remediation script.
type RemediationInput struct {
	// scopeMrn has to be assetMrn or spaceMrn used to determine the platform name in case of the packages it has to be the spaceMrn when the vulnerabilityId is present. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// one of these 3 must be present. (Optional.)
	AdvisoryId *ID `json:"advisoryId,omitempty" tfgen:"required=0"`
	// (Optional.)
	VulnerabilityId *ID `json:"vulnerabilityId,omitempty" tfgen:"required=0"`
	// (Optional.)
	Packages *[]RemediationPackageFields `json:"packages,omitempty" tfgen:"required=0"`
	// filter by remediation type, etc. (Optional.)
	Filter *RemediationFilter `json:"filter,omitempty" tfgen:"required=0"`
}

// RemediationPackageFields represents we need to know the packages to generate the remediation script.
type RemediationPackageFields struct {
	// Package name. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// Package version which fixes the vulnerability. (Optional.)
	FixedVersion *String `json:"fixedVersion,omitempty" tfgen:"required=0"`
}

// RemoveOrganizationMembershipInput represents input for removing organization membership.
type RemoveOrganizationMembershipInput struct {
	// The MRN of the organization. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// The MRN of the user. (Required.)
	UserMrn String `json:"userMrn" tfgen:"required=1"`
}

// RemoveSpaceMembershipInput represents input for removing space membership.
type RemoveSpaceMembershipInput struct {
	// The MRN of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The MRN of the user. (Required.)
	UserMrn String `json:"userMrn" tfgen:"required=1"`
}

// RenderedAssetQueryDataInput represents rendered asset query data input.
type RenderedAssetQueryDataInput struct {
	// assetMrn is the MRN of the asset to query. (Required.)
	AssetMrn String `json:"assetMrn" tfgen:"required=1"`
	// queryMrn is the MRN of the query to get the data for. (Required.)
	QueryMrn String `json:"queryMrn" tfgen:"required=1"`
}

// ReportViewedInfo represents report viewed info. Only 1 page can be specified at a time.
type ReportViewedInfo struct {

	// Org view page info. (Optional.)
	OrgView *OrgViewPageInfo `json:"orgView,omitempty" tfgen:"required=0"`
	// Asset overview page info. (Optional.)
	AssetOverview *AssetOverviewPageInfo `json:"assetOverview,omitempty" tfgen:"required=0"`
	// CI/CD project page info. (Optional.)
	CicdProject *CiCdProjectPageInfo `json:"cicdProject,omitempty" tfgen:"required=0"`
	// CI/CD job page info. (Optional.)
	CicdJob *CiCdJobPageInfo `json:"cicdJob,omitempty" tfgen:"required=0"`
	// Vulnerability dashboard page info. (Optional.)
	VulnerabilityDashboard *VulnerabilityDashboardPageInfo `json:"vulnerabilityDashboard,omitempty" tfgen:"required=0"`
	// Security dashboard page info. (Optional.)
	SecurityDashboard *SecurityDashboardPageInfo `json:"securityDashboard,omitempty" tfgen:"required=0"`
}

// ReportViewedInput represents report viewed input.
type ReportViewedInput struct {
	// The page that was viewed. (Required.)
	Page ReportViewedPage `json:"page" tfgen:"required=1"`
	// Information about the viewed page. (Required.)
	Info ReportViewedInfo `json:"info" tfgen:"required=1"`
}

// RevokeRegistrationTokenInput represents input for revoking a registration token.
type RevokeRegistrationTokenInput struct {
	// The MRN of the registration token to revoke. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// RiskFactorFilter represents risk factor filter by mrn.
type RiskFactorFilter struct {

	// MRN filter query. (Optional.)
	Mrns *RiskFactorFilterQuery `json:"mrns,omitempty" tfgen:"required=0"`
	// Risk factor indicators to filter on. They are ORed together. (Optional.)
	Indicators *[]String `json:"indicators,omitempty" tfgen:"required=0"`
}

// RiskFactorFilterQuery represents risk factor filter query.
type RiskFactorFilterQuery struct {

	// Any terms here will be ANDed. (Optional.)
	And *[]String `json:"and,omitempty" tfgen:"required=0"`
	// Any terms here will be ORed. (Optional.)
	Or *[]String `json:"or,omitempty" tfgen:"required=0"`
}

// RiskFactorMagnitudeModification represents risk factor magnitude modification.
type RiskFactorMagnitudeModification struct {
	// Risk factor magnitude: -100 to 100. (Required.)
	Value Int `json:"value" tfgen:"required=1"`
	// Risk factor is toxic. (Required.)
	IsToxic Boolean `json:"isToxic" tfgen:"required=1"`
}

// RoleInput represents input for a role.
type RoleInput struct {
	// The MRN of the role. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
}

// S3ConfigurationOptionsInput represents s3 integration input.
type S3ConfigurationOptionsInput struct {
	// The output format for the S3 bucket. (Required.)
	Output BucketOutputType `json:"output" tfgen:"required=1"`
	// The S3 endpoint URL. (Required.)
	Endpoint String `json:"endpoint" tfgen:"required=1"`
	// The S3 bucket name. (Required.)
	Bucket String `json:"bucket" tfgen:"required=1"`
	// Whether to use legacy list mode. (Required.)
	UseLegacyList Boolean `json:"useLegacyList" tfgen:"required=1"`
	// Whether to use path style access. (Required.)
	UsePathStyle Boolean `json:"usePathStyle" tfgen:"required=1"`
	// The access key for the S3 bucket. (Required.)
	AccessKey String `json:"accessKey" tfgen:"required=1"`
	// The secret access key for the S3 bucket. (Required.)
	SecretAccessKey String `json:"secretAccessKey" tfgen:"required=1"`
}

// SSOProviderInput represents input for SSO provider configuration.
type SSOProviderInput struct {
	// The entity ID of the identity provider. (Required.)
	IdpEntityID String `json:"idpEntityID" tfgen:"required=1"`
	// The SSO URL for authentication. (Required.)
	SsoUrl String `json:"ssoUrl" tfgen:"required=1"`
	// The entity ID of the relying party. (Required.)
	RpEntityID String `json:"rpEntityID" tfgen:"required=1"`
	// The X.509 fingerprints for certificate validation. (Required.)
	X509Fingerprints []String `json:"x509Fingerprints" tfgen:"required=1"`
	// Whether the SSO provider is enabled. (Required.)
	Enabled Boolean `json:"enabled" tfgen:"required=1"`

	// X.509 certificates used for new certificates. (Optional.)
	X509Certificates *[]String `json:"x509Certificates,omitempty" tfgen:"required=0"`
}

// ScanConfigurationInput represents scanConfigurationInput is the input options for the AWS integration scan configuration.
type ScanConfigurationInput struct {

	// Whether to scan the AWS account. (Optional.)
	AccountScan *Boolean `json:"accountScan,omitempty" tfgen:"required=0"`
	// Whether to scan EC2 instances. (Optional.)
	Ec2Scan *Boolean `json:"ec2Scan,omitempty" tfgen:"required=0"`
	// Whether to scan ECR repositories. (Optional.)
	EcrScan *Boolean `json:"ecrScan,omitempty" tfgen:"required=0"`
	// Whether to scan ECS clusters. (Optional.)
	EcsScan *Boolean `json:"ecsScan,omitempty" tfgen:"required=0"`
	// The number of hours between scans. (Optional.)
	CronScaninHours *Int `json:"cronScaninHours,omitempty" tfgen:"required=0"`
	// Event scan triggers. (Optional.)
	EventScanTriggers *[]*AWSEventPatternInput `json:"eventScanTriggers,omitempty" tfgen:"required=0"`
	// EC2 scan options. (Optional.)
	Ec2ScanOptions *Ec2ScanOptionsInput `json:"ec2ScanOptions,omitempty" tfgen:"required=0"`
	// VPC configuration. (Optional.)
	VpcConfiguration *VPCConfigurationInput `json:"vpcConfiguration,omitempty" tfgen:"required=0"`
}

// ScimGroupMapping represents a mapping of SCIM group to organization or its spaces and an IAM role.
type ScimGroupMapping struct {
	// IAM role to be assigned to all members of the SCIM group. (Required.)
	IamRole String `json:"iamRole" tfgen:"required=1"`

	// MRN of the space to be mapped. (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// MRN of the organization to be mapped. (Optional.)
	OrgMrn *String `json:"orgMrn,omitempty" tfgen:"required=0"`
}

// ScopeDocumentOptionsInput represents input options for the scope of the document.
type ScopeDocumentOptionsInput struct {
	// The MRN of the scope to generate the report for. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// ScoreRange represents score range.
type ScoreRange struct {
	// Begin. (Required.)
	Begin Int `json:"begin" tfgen:"required=1"`
	// End. (Required.)
	End Int `json:"end" tfgen:"required=1"`
}

// SearchFilters represents filters for search operations.
type SearchFilters struct {

	// The type of aggregate score to filter by. (Optional.)
	AggregateScoreType *AggregateScoreType `json:"aggregateScoreType,omitempty" tfgen:"required=0"`
}

// SecurityDashboardPageInfo represents security dashboard pagination info.
type SecurityDashboardPageInfo struct {
	// organization mrn. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// space mrn. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
}

// SecurityPipelineGithubConfigurationOptionsInput represents security pipeline for Github integration input.
type SecurityPipelineGithubConfigurationOptionsInput struct {

	// Whether to generate a SSH key-pair. If false, the user should provision their own SSH key in the repo. (Optional.)
	GenerateSSHKey *Boolean `json:"generateSSHKey,omitempty" tfgen:"required=0"`
	// The list of Github repos to configure. (Optional.)
	Repositories *[]SecurityPipelineGithubConfigurationOptionsRepoInput `json:"repositories,omitempty" tfgen:"required=0"`
}

// SecurityPipelineGithubConfigurationOptionsRepoInput represents security pipeline for Github integration repository input.
type SecurityPipelineGithubConfigurationOptionsRepoInput struct {
	// (Required.)
	FullName String `json:"fullName" tfgen:"required=1"`
	// (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
}

// SentinelOneConfigurationOptionsInput represents sentinelOne integration input.
type SentinelOneConfigurationOptionsInput struct {
	// The host of the SentinelOne integration. (Required.)
	Host String `json:"host" tfgen:"required=1"`
	// The account ID of the SentinelOne integration. (Required.)
	Account String `json:"account" tfgen:"required=1"`

	// certificate or client secret is required. (Optional.)
	Certificate *String `json:"certificate,omitempty" tfgen:"required=0"`
	// (Optional.)
	ClientSecret *String `json:"clientSecret,omitempty" tfgen:"required=0"`
	// createAssets is a flag to create assets in the backend when they are not found. (Optional.)
	CreateAssets *Boolean `json:"createAssets,omitempty" tfgen:"required=0"`
}

// ServiceAccountOrder represents input for ordering service accounts.
type ServiceAccountOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field ServiceAccountOrderField `json:"field" tfgen:"required=1"`
}

// SetAssetAnnotationsInput represents input for setting asset annotations.
type SetAssetAnnotationsInput struct {
	// The MRN of the space containing the asset. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The MRN of the asset to annotate. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The annotations to set for the asset. (Required.)
	Annotations []KeyValueInput `json:"annotations" tfgen:"required=1"`
}

// SetCustomPolicyInput represents uploads policy content.
type SetCustomPolicyInput struct {
	// RFC2397, base64 encoded policy bundle. (Required.)
	Dataurl String `json:"dataurl" tfgen:"required=1"`

	// The mrn of the space. (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// Scope mrn is the mrn of the space or platform. (Optional.)
	ScopeMrn *String `json:"scopeMrn,omitempty" tfgen:"required=0"`
	// Overwrites the policy if it already exists. (Optional.)
	Overwrite *Boolean `json:"overwrite,omitempty" tfgen:"required=0"`
}

// SetCustomQueryPackInput represents creates a new query pack with the provided content.
type SetCustomQueryPackInput struct {
	// The mrn of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// RFC2397, base64 encoded policy bundle. (Required.)
	Dataurl String `json:"dataurl" tfgen:"required=1"`

	// Overwrites the query pack if it already exists. (Optional.)
	Overwrite *Boolean `json:"overwrite,omitempty" tfgen:"required=0"`
}

// SetOrganizationMembershipInput represents input for setting organization membership.
type SetOrganizationMembershipInput struct {
	// The MRN of the organization. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// The MRN of the user. (Required.)
	UserMrn String `json:"userMrn" tfgen:"required=1"`
	// The roles to assign to the user. (Required.)
	Roles []RoleInput `json:"roles" tfgen:"required=1"`
}

// SetRoleInput represents input for setting a role.
type SetRoleInput struct {
	// The MRN of the entity to update. (Required.)
	EntityMrn String `json:"entityMrn" tfgen:"required=1"`
	// The roles to assign to the entity. (Required.)
	Roles []RoleInput `json:"roles" tfgen:"required=1"`
}

// SetRolesInput represents input for setting roles.
type SetRolesInput struct {

	// The MRN of the space (deprecated, use scopeMrn). (Optional.)
	SpaceMrn *String `json:"spaceMrn,omitempty" tfgen:"required=0"`
	// The MRN of the scope. (Optional.)
	ScopeMrn *String `json:"scopeMrn,omitempty" tfgen:"required=0"`
	// The role updates to apply. (Optional.)
	Updates *[]SetRoleInput `json:"updates,omitempty" tfgen:"required=0"`
}

// SetSSOProviderInput represents input for setting SSO provider.
type SetSSOProviderInput struct {
	// The MRN of the organization. (Required.)
	OrganizationMrn String `json:"organizationMrn" tfgen:"required=1"`

	// The SSO provider configuration. (Optional.)
	Provider *SSOProviderInput `json:"provider,omitempty" tfgen:"required=0"`
}

// SetScimGroupMappingInput represents input type for setScimGroupMapping.
type SetScimGroupMappingInput struct {
	// Organization MRN for with the SCIM mapping is defined. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// Group Identifier which is the SCIM displayName. (Required.)
	Group String `json:"group" tfgen:"required=1"`
	// Mappings of SCIM group to organization or its spaces with IAM role. (Required.)
	Mappings []ScimGroupMapping `json:"mappings" tfgen:"required=1"`
}

// SetSpaceMembershipInput represents input for setting space membership.
type SetSpaceMembershipInput struct {
	// The MRN of the space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// The MRN of the user. (Required.)
	UserMrn String `json:"userMrn" tfgen:"required=1"`
	// The roles to assign to the user. (Required.)
	Roles []RoleInput `json:"roles" tfgen:"required=1"`
}

// ShodanConfigurationOptionsInput represents shodan integration input.
type ShodanConfigurationOptionsInput struct {
	// Shodan API token. (Required.)
	Token String `json:"token" tfgen:"required=1"`

	// Shodan scan targets. Can be a domain, IP or CIDR. (Optional.)
	Targets *[]String `json:"targets,omitempty" tfgen:"required=0"`
}

// SlackConfigurationOptionsInput represents slack integration input.
type SlackConfigurationOptionsInput struct {

	// The Slack API token (optional). (Optional.)
	SlackToken *String `json:"slackToken,omitempty" tfgen:"required=0"`
	// Type of notifications to send (default asset updates). (Optional.)
	NotificationType *NotificationType `json:"notificationType,omitempty" tfgen:"required=0"`
}

// SnowflakeConfigurationOptionsInput represents snowflake integration input.
type SnowflakeConfigurationOptionsInput struct {
	// The Snowflake account ID. (Required.)
	AccountId String `json:"accountId" tfgen:"required=1"`
	// The Snowflake database name. (Required.)
	Database String `json:"database" tfgen:"required=1"`
	// The Snowflake schema name. (Required.)
	Schema String `json:"schema" tfgen:"required=1"`
	// The Snowflake region. (Required.)
	Region String `json:"region" tfgen:"required=1"`
	// The Snowflake warehouse name. (Required.)
	Warehouse String `json:"warehouse" tfgen:"required=1"`
	// The Snowflake user name. (Required.)
	Username String `json:"username" tfgen:"required=1"`
	// The Snowflake password. (Required.)
	Password String `json:"password" tfgen:"required=1"`

	// The Snowflake role. (Optional.)
	Role *String `json:"role,omitempty" tfgen:"required=0"`
}

// SpacePolicySummaryInput represents spacePolicySummaryInput contains the input parameters for the spacePolicySummary query.
type SpacePolicySummaryInput struct {
	// spaceMrn is the MRN of the space. Statistics will be calculated for the provided policy MRN in this space. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// policyMrn is the MRN of the policy to summarize. (Required.)
	PolicyMrn String `json:"policyMrn" tfgen:"required=1"`
}

// SpaceSettingsInput represents space settings input.
type SpaceSettingsInput struct {

	// Terminated assets configuration. (Optional.)
	TerminatedAssetsConfiguration *TerminatedAssetsConfigurationInput `json:"terminatedAssetsConfiguration,omitempty" tfgen:"required=0"`
	// Unused service accounts configuration. (Optional.)
	UnusedServiceAccountsConfiguration *UnusedServiceAccountsConfigurationInput `json:"unusedServiceAccountsConfiguration,omitempty" tfgen:"required=0"`
	// Garbage collect assets configuration. (Optional.)
	GarbageCollectAssetsConfiguration *GarbageCollectAssetsConfigurationInput `json:"garbageCollectAssetsConfiguration,omitempty" tfgen:"required=0"`
	// Platform vulnerability configuration. (Optional.)
	PlatformVulnerabilityConfiguration *PlatformVulnerabilityConfigurationInput `json:"platformVulnerabilityConfiguration,omitempty" tfgen:"required=0"`
	// Platform MQL VEX configuration. (Optional.)
	PlatformMqlVexConfiguration *PlatformMqlVexConfigurationInput `json:"platformMqlVexConfiguration,omitempty" tfgen:"required=0"`
	// EOL platform configuration. (Optional.)
	EolAssetsConfiguration *EolAssetsConfigurationInput `json:"eolAssetsConfiguration,omitempty" tfgen:"required=0"`
	// Cases configuration. (Optional.)
	CasesConfiguration *CasesConfigurationInput `json:"casesConfiguration,omitempty" tfgen:"required=0"`
	// exceptions configuration. (Optional.)
	ExceptionsConfiguration *ExceptionsConfigurationInput `json:"exceptionsConfiguration,omitempty" tfgen:"required=0"`
	// MVD experimental sources configuration. (Optional.)
	MvdExperimentalSourcesConfiguration *MvdExperimentalSourcesConfigurationInput `json:"mvdExperimentalSourcesConfiguration,omitempty" tfgen:"required=0"`
}

// SubscriptionItem represents input for subscription item details.
type SubscriptionItem struct {
	// The price ID for the subscription item. (Required.)
	PriceID String `json:"priceID" tfgen:"required=1"`
	// The quantity of the subscription item. (Required.)
	Quantity Int `json:"quantity" tfgen:"required=1"`
}

// SuppressIntegrationMessageInput represents suppressIntegrationMessageInput contains the inputs needed to suppress (remove) an integration message.
type SuppressIntegrationMessageInput struct {
	// The MRN of the integration. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The message to suppress. (Required.)
	Message String `json:"message" tfgen:"required=1"`

	// The identifier of the message. (Optional.)
	Identifier *String `json:"identifier,omitempty" tfgen:"required=0"`
}

// TerminatedAssetsConfigurationInput represents terminated assets configuration input.
type TerminatedAssetsConfigurationInput struct {

	// Whether to cleanup terminated assets. (Optional.)
	Cleanup *Boolean `json:"cleanup,omitempty" tfgen:"required=0"`
}

// TicketContextInput represents fetch Jira ticket context information.
type TicketContextInput struct {
	// The MRN of the scope for which the context is fetched. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// Jira ticket context parameters. (Optional.)
	Jira *JiraTicketContextInput `json:"jira,omitempty" tfgen:"required=0"`
	// Azure Devops ticket context parameters. (Optional.)
	AzureDevops *AzureDevopsTicketContextInput `json:"azureDevops,omitempty" tfgen:"required=0"`
	// Zendesk ticket context parmeters. (Optional.)
	Zendesk *ZendeskTicketContextInput `json:"zendesk,omitempty" tfgen:"required=0"`
}

// TicketingIntegrationsInput represents ticketingIntegrationsInput describes the input for listing ticketing integrations.
type TicketingIntegrationsInput struct {
	// (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
}

// TimeRange represents time Range.
type TimeRange struct {

	// Upper bound of the time range. Must be valid RFC 3339 timestamp. (Optional.)
	To *String `json:"to,omitempty" tfgen:"required=0"`
	// Lower bound of the time range. Must be valid RFC 3339 timestamp. (Optional.)
	From *String `json:"from,omitempty" tfgen:"required=0"`
}

// TimestampFilter represents timestamp filter.
type TimestampFilter struct {
	// RFC3339 timestamp. (Required.)
	Timestamp String `json:"timestamp" tfgen:"required=1"`
	// Comparison operator. (Required.)
	Operator ComparisonOperator `json:"operator" tfgen:"required=1"`
}

// TriggerActionInput represents inputs used to trigger an action on a client integration.
type TriggerActionInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// (Required.)
	Type ActionType `json:"type" tfgen:"required=1"`

	// (Optional.)
	ActionOptions *TriggerActionOptionsInput `json:"actionOptions,omitempty" tfgen:"required=0"`
}

// TriggerActionOptionsInput represents inputs options used to trigger an action on a client integration.
type TriggerActionOptionsInput struct {

	// Optional source identifier, e.g. AWS account id. (Optional.)
	Identifiers *[]String `json:"identifiers,omitempty" tfgen:"required=0"`
	// Optional - AWS scan options. (Optional.)
	AwsScanOptions *AwsScanOptions `json:"awsScanOptions,omitempty" tfgen:"required=0"`
}

// UnusedServiceAccountsConfigurationInput represents unused service accounts configuration input.
type UnusedServiceAccountsConfigurationInput struct {

	// Whether to cleanup unused service accounts. (Optional.)
	Cleanup *Boolean `json:"cleanup,omitempty" tfgen:"required=0"`
}

// UpdateAPITokenInput represents input used when updating an API token name or description.
type UpdateAPITokenInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
	// (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
}

// UpdateAgentInput represents inputs for updating agents.
type UpdateAgentInput struct {
	// The MRN of the agent. (Required.)
	AgentMrn String `json:"agentMrn" tfgen:"required=1"`

	// The notes of the agent. (Optional.)
	Notes *String `json:"notes,omitempty" tfgen:"required=0"`
}

// UpdateClientIntegrationConfigurationInput represents input for updating a client integration.
type UpdateClientIntegrationConfigurationInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// (Required.)
	Type ClientIntegrationType `json:"type" tfgen:"required=1"`
	// (Required.)
	ConfigurationOptions ClientIntegrationConfigurationInput `json:"configurationOptions" tfgen:"required=1"`

	// (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
}

// UpdateClientIntegrationNameInput represents inputs to change the name of a client integration.
type UpdateClientIntegrationNameInput struct {
	// The MRN of the client integration. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The new name for the client integration. (Required.)
	Name String `json:"name" tfgen:"required=1"`
}

// UpdateFindingsSLAInput represents update findings SLA input.
type UpdateFindingsSLAInput struct {
	// The rating to which this SLA applies. (Required.)
	Rating ScoreRating `json:"rating" tfgen:"required=1"`
	// The target number of days to resolve a finding. (Required.)
	DaysToResolve Int `json:"daysToResolve" tfgen:"required=1"`
	// The number of days before a warning is issued. (Required.)
	DaysBeforeWarning Int `json:"daysBeforeWarning" tfgen:"required=1"`
}

// UpdateOrganizationInput represents update organization input.
type UpdateOrganizationInput struct {
	// MRN. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// Name. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// Description. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
}

// UpdateSLAsInput represents update SLAs input.
type UpdateSLAsInput struct {
	// SLAs for findings. (Required.)
	Findings []UpdateFindingsSLAInput `json:"findings" tfgen:"required=1"`
}

// UpdateSecurityModelInput represents update security model input.
type UpdateSecurityModelInput struct {
	// The mrn of the space. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// SLAs. (Optional.)
	Slas *UpdateSLAsInput `json:"slas,omitempty" tfgen:"required=0"`
}

// UpdateServiceAccountInput represents input used when updating service account name, notes, and labels.
type UpdateServiceAccountInput struct {
	// (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
	// (Optional.)
	Notes *String `json:"notes,omitempty" tfgen:"required=0"`
	// (Optional.)
	Labels *[]*KeyValueInput `json:"labels,omitempty" tfgen:"required=0"`
}

// UpdateSpaceInput represents update space input.
type UpdateSpaceInput struct {
	// MRN. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// Name. (Required.)
	Name String `json:"name" tfgen:"required=1"`

	// Description. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// Settings. (Optional.)
	Settings *SpaceSettingsInput `json:"settings,omitempty" tfgen:"required=0"`
}

// UpdateTeamInput represents input for updating a team.
type UpdateTeamInput struct {
	// The MRN of the team to update. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`
	// The name of the team. (Required.)
	Name String `json:"name" tfgen:"required=1"`
	// The description of the team. (Required.)
	Description String `json:"description" tfgen:"required=1"`
}

// UpdateUserInput represents input for updating user information.
type UpdateUserInput struct {
	// The name of the user. (Required.)
	Name String `json:"name" tfgen:"required=1"`
}

// UpdateWorkspaceInput represents update workspace input.
type UpdateWorkspaceInput struct {
	// MRN. (Required.)
	Mrn String `json:"mrn" tfgen:"required=1"`

	// The name of the workspace. (Optional.)
	Name *String `json:"name,omitempty" tfgen:"required=0"`
	// Description of the workspace. (Optional.)
	Description *String `json:"description,omitempty" tfgen:"required=0"`
	// Workspace selections. (Optional.)
	Selections *WorkspaceSelectionsInput `json:"selections,omitempty" tfgen:"required=0"`
}

// UploadFrameworkInput represents upload framework input.
type UploadFrameworkInput struct {
	// The mrn of the space to which the framework belongs. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
	// RFC2397, base64 encoded policy bundle. (Required.)
	Dataurl String `json:"dataurl" tfgen:"required=1"`
}

// VPCConfigurationInput represents vPCConfigurationInput describes the options for the VPCs used for the scanners. Setting useDefaultVPC to true will create the mondoo scanners in the AWS account default VPC. Setting useDefaultVPC to false will lead to the lambda function creating the VPC for the scanners in each scanning region.
type VPCConfigurationInput struct {

	// Whether to use the default VPC. (Optional.)
	UseDefaultVPC *Boolean `json:"useDefaultVPC,omitempty" tfgen:"required=0"`
	// Whether to use the Mondoo VPC. (Optional.)
	UseMondooVPC *Boolean `json:"useMondooVPC,omitempty" tfgen:"required=0"`
	// The CIDR of the VPC. (Optional.)
	CIDR *String `json:"CIDR,omitempty" tfgen:"required=0"`
	// The flavour of the VPC. (Optional.)
	VpcFlavour *VPCFlavour `json:"vpcFlavour,omitempty" tfgen:"required=0"`
	// The tag of the VPC. (Optional.)
	VpcTag *VPCTagInput `json:"vpcTag,omitempty" tfgen:"required=0"`
}

// VPCTagInput represents vPCTagInput represents input for a key-value pair for VPC tagging.
type VPCTagInput struct {
	// The key of the tag. (Required.)
	Key String `json:"key" tfgen:"required=1"`
	// The value of the tag. (Required.)
	Value String `json:"value" tfgen:"required=1"`
}

// VulnerabilityDashboardPageInfo represents vuln Dashboard pagination info.
type VulnerabilityDashboardPageInfo struct {
	// organization mrn. (Required.)
	OrgMrn String `json:"orgMrn" tfgen:"required=1"`
	// space mrn. (Required.)
	SpaceMrn String `json:"spaceMrn" tfgen:"required=1"`
}

// VulnerabilityDocumentOptionsInput represents input options for the vulnerability of the document.
type VulnerabilityDocumentOptionsInput struct {
	// The ID of the vulnerability to generate the report for. (Required.)
	VulnerabilityId String `json:"vulnerabilityId" tfgen:"required=1"`
	// The MRN of the scope to generate the report for. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`
}

// WIFAuthBindingOrder represents input for ordering WIF auth bindings.
type WIFAuthBindingOrder struct {
	// The direction to order by. (Required.)
	Direction OrderDirection `json:"direction" tfgen:"required=1"`
	// The field to order by. (Required.)
	Field AuthBindingOrderField `json:"field" tfgen:"required=1"`
}

// WorkspaceConditionPossibleValuesInput represents workspace condition possible values input.
type WorkspaceConditionPossibleValuesInput struct {
	// Scope MRN. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// Query to filter values on. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
	// String field. (Optional.)
	StringField *WorkspaceSelectionConditionStringField `json:"stringField,omitempty" tfgen:"required=0"`
	// Int field. (Optional.)
	IntField *WorkspaceSelectionConditionIntField `json:"intField,omitempty" tfgen:"required=0"`
	// Rating field. (Optional.)
	RatingField *WorkspaceSelectionConditionRatingField `json:"ratingField,omitempty" tfgen:"required=0"`
	// Key-value field. (Optional.)
	KeyValueField *WorkspaceSelectionConditionKeyValueField `json:"keyValueField,omitempty" tfgen:"required=0"`
}

// WorkspaceSelectionConditionInput represents workspace selection condition.
type WorkspaceSelectionConditionInput struct {
	// Operator determining how the condition is joined with the other conditions in the list. (Required.)
	Operator WorkspaceSelectionConditionOperator `json:"operator" tfgen:"required=1"`

	// String condition. (Optional.)
	StringCondition *WorkspaceSelectionStringConditionInput `json:"stringCondition,omitempty" tfgen:"required=0"`
	// Int condition. (Optional.)
	IntCondition *WorkspaceSelectionIntConditionInput `json:"intCondition,omitempty" tfgen:"required=0"`
	// Rating condition. (Optional.)
	RatingCondition *WorkspaceSelectionRatingConditionInput `json:"ratingCondition,omitempty" tfgen:"required=0"`
	// Key-value condition. (Optional.)
	KeyValueCondition *WorkspaceSelectionKeyValueConditionInput `json:"keyValueCondition,omitempty" tfgen:"required=0"`
}

// WorkspaceSelectionInput represents workspace selection defining conditions for selecting assets for a workspace.
type WorkspaceSelectionInput struct {
	// A list of conditions for the selection. (Required.)
	Conditions []WorkspaceSelectionConditionInput `json:"conditions" tfgen:"required=1"`
}

// WorkspaceSelectionIntConditionInput represents workspace selection condition int condition.
type WorkspaceSelectionIntConditionInput struct {
	// Field to match. (Required.)
	Field WorkspaceSelectionConditionIntField `json:"field" tfgen:"required=1"`
	// Operator to use. (Required.)
	Operator WorkspaceSelectionConditionNumericOperator `json:"operator" tfgen:"required=1"`
	// Values to match. Values are ORed together. (Required.)
	Values []Int `json:"values" tfgen:"required=1"`
}

// WorkspaceSelectionKeyValueConditionInput represents workspace selection key-value condition.
type WorkspaceSelectionKeyValueConditionInput struct {
	// Field to match. (Required.)
	Field WorkspaceSelectionConditionKeyValueField `json:"field" tfgen:"required=1"`
	// Operator to use. (Required.)
	Operator WorkspaceSelectionConditionKeyValueOperator `json:"operator" tfgen:"required=1"`
	// Values to match. Values are ORed together. (Required.)
	Values []KeyValueInput `json:"values" tfgen:"required=1"`
}

// WorkspaceSelectionRatingConditionInput represents workspace selection rating condition.
type WorkspaceSelectionRatingConditionInput struct {
	// Field to match. (Required.)
	Field WorkspaceSelectionConditionRatingField `json:"field" tfgen:"required=1"`
	// Operator to use. (Required.)
	Operator WorkspaceSelectionConditionRatingOperator `json:"operator" tfgen:"required=1"`
	// Values to match. Values are ORed together. (Required.)
	Values []ScoreRating `json:"values" tfgen:"required=1"`
}

// WorkspaceSelectionStringConditionInput represents workspace selection string condition.
type WorkspaceSelectionStringConditionInput struct {
	// Field to match. (Required.)
	Field WorkspaceSelectionConditionStringField `json:"field" tfgen:"required=1"`
	// Operator to use. (Required.)
	Operator WorkspaceSelectionConditionStringOperator `json:"operator" tfgen:"required=1"`
	// Values to match. Values are ORed together. (Required.)
	Values []String `json:"values" tfgen:"required=1"`
}

// WorkspaceSelectionsInput represents workspace selections input.
type WorkspaceSelectionsInput struct {
	// A list of workspace selections. (Required.)
	Selections []WorkspaceSelectionInput `json:"selections" tfgen:"required=1"`
}

// WorkspacesInput represents workspaces input.
type WorkspacesInput struct {
	// The scope of the workspaces to list. (Required.)
	ScopeMrn String `json:"scopeMrn" tfgen:"required=1"`

	// Query searches workspaces by name. (Optional.)
	Query *String `json:"query,omitempty" tfgen:"required=0"`
}

// ZendeskConfigurationOptionsInput represents zendesk integration input.
type ZendeskConfigurationOptionsInput struct {
	// The Zendesk subdomain. (Required.)
	Subdomain String `json:"subdomain" tfgen:"required=1"`
	// The Zendesk email address. (Required.)
	Email String `json:"email" tfgen:"required=1"`
	// The Zendesk API token. (Required.)
	ApiToken String `json:"apiToken" tfgen:"required=1"`
	// Whether to auto-close tickets. (Required.)
	AutoCloseTickets Boolean `json:"autoCloseTickets" tfgen:"required=1"`
	// Whether to auto-create tickets. (Required.)
	AutoCreateTickets Boolean `json:"autoCreateTickets" tfgen:"required=1"`

	// A list of custom fields for Zendesk. (Optional.)
	CustomFields *[]ZendeskCustomFieldInput `json:"customFields,omitempty" tfgen:"required=0"`
}

// ZendeskCustomFieldInput represents zendesk custom field input.
type ZendeskCustomFieldInput struct {
	// Field ID. (Required.)
	Id Int `json:"id" tfgen:"required=1"`
	// Value. (Required.)
	Value String `json:"value" tfgen:"required=1"`
}

// ZendeskTicketConfigInput represents zendesk ticket configuration input.
type ZendeskTicketConfigInput struct {

	// The Zendesk priority. (Optional.)
	Priority *String `json:"priority,omitempty" tfgen:"required=0"`
	// The Zendesk ticket type. (Optional.)
	Type *String `json:"type,omitempty" tfgen:"required=0"`
}

// ZendeskTicketContextInput represents parameters for ZendeskTicketContext.
type ZendeskTicketContextInput struct {
	// The type of the ticket context. (Required.)
	Type ZendeskTicketContextType `json:"type" tfgen:"required=1"`
}
